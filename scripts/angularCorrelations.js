////////////////////////////////////////////
// main setup
////////////////////////////////////////////
//
// App Framework general work flow:
// Set up the dataStore, process any URL arguments provided and generate initial DOM
// Throughout the process provide onscreen instructions and information to the user in Divs and progressBar.
// User input to determine which histogram files required, peak search data etc.
// Loop through fetching all required histograms from all files.
// Loop through projecting all matrices with all required gates to have the complete set of 1d histograms required.
// Loop through all peak finding and peak fitting.
// Perform corrections, normalizations, calibrations, calculations with the fit results.
// Display results in tables and dygraphs.
// Eanble output buttons to download results.
// Job done.

// a Global variable to pass around the information taken from the URL arguments
var urlData = [];

function setupDataStore(){
  //sets up global variable datastore
  console.log("setupDataStore()");

      // Return a new promise.
      return new Promise(function(resolve, reject) {


  var i, num=0, groups = [];

  dataStore = {};

  //network and raw data
  dataStore.spectrumServer = "";           //host + port of analyzer server
  dataStore.spectrumServerBackend = "";           //host + port of analyzer server
  dataStore.spectrumServerPort = "";           //host + port of analyzer server
  dataStore.ODBhost = 'http://grsmid00.triumf.ca:8081/';                  //MIDAS / ODB host + port

  // Histogram directory and filename
  dataStore.histoFileDirectoryPath = '/data3/S5020/Histograms';
  dataStore.histoFileName = '';
  dataStore.histoAutoLoad = false;        // Flag set by the presence of a directory and filename in the URL to automatically load it. Default is off.

  dataStore.ProgressValue = 0;           // Current width of the progressBar

  dataStore.numberOfClovers = 16;                                     // Default number of clovers is all of the array
  // shouldn't need to change anything below this line -----------------------------------------------------------------------

  dataStore.pageTitle = 'Angular Correlations';                                   //header title
  dataStore.DAQquery = '';
  dataStore.ViewConfigQuery = '';
  dataStore.ODBrequests = [];                                               //request strings for odb parameters
  dataStore.PSCchannels = {};                                             //store the full list of channels in the PSC table for building a Cal file
  dataStore.PSCaddresses = {};                                            //store the full list of addresses in the PSC table for building a Cal file
  dataStore.RunNumber = '';                                               //store the run number for naming the Cal file
  dataStore.rawData = {};                                                 //buffer for raw spectrum data
  dataStore.raw = [0];                                                 //buffer for raw matrix data
  dataStore.matrix = [];                                                 //buffer for objects containing the uncompressed matrix data
  dataStore.hm = {};                                                 //object for 2d matrix stuff
  dataStore.hm._raw = [0];                                                 //buffer for raw matrix data
  dataStore.createdSpectra = {};                                       //initialize empty object for created spectra
  dataStore.THESEdetectors = [];                                    //10-char codes of all possible griffin/paces detectors. Contents based on detectorChoice
  dataStore.angularMatrices = [];                                   // list of the names of the angular correlation matrices
  dataStore.angCorrProjections = [];                                // list of the names of the projections to be fitted
  dataStore.singlesSpectra = [];                                    // list of the names of the singles spectra to be fitted
  dataStore.HPGeDistance = 145;                                    // Distance of HPGe (110,145) mm, used to determine which angles to use.
  dataStore.gatePeakEnergy = [];                                    // Peak centroid to be used as the gate in each matrix
  dataStore.fitPeakEnergies = [];                                    // list of the peak centroids to be fitted in each spectrum
  dataStore.peakWidth = 6;                                           // peak width to be used in fitting
  // Names of Angular correlation matrices that we need to fetch and use
//  for(i=0; i<52; i++){
  for(i=0; i<52; i++){ // Start with just a few
    dataStore.angularMatrices[i] = "Ge-Ge_angular_bin"+i;
  }
  //fitting
  dataStore.mode = 'auto';                                              //mode of operation: manual (user defined search regions) or auto (predefined search regions).
  dataStore.ROI = {};                                                     //regions of interest (singles) to look for peaks in: 'plotname': {'ROIupper':[low bin, high bin], 'ROIlower': [low bin, high bin]}
  dataStore.ROIprojections = {};                                        //regions of interest (projections) to look for peaks in: 'plotname': {'ROIupper':[low bin, high bin], 'ROIlower': [low bin, high bin]}
  dataStore.fitResults = {};                                            //fit results of singles: 'plotname': [[amplitude, center, width, intercept, slope], [amplitude, center, width, intercept, slope]]
  dataStore.fitResultsProjections = {};                                 //fit results of Projections: 'plotname': [[amplitude, center, width, intercept, slope], [amplitude, center, width, intercept, slope]]

// Custom settings for Angular Correlations
  // Set up GRIFFIN detectors
  var crystals = ["B","G","R","W"];
    for(i=1; i<(dataStore.numberOfClovers+1); i++){
      for(k=0; k<4; k++){
        dataStore.THESEdetectors[num] = 'GRG'+alwaysThisLong(i, 2)+crystals[k]+'N00A';
        num++;
      }
    }

  dataStore.angularBinPeakArea = [];         // place to store the peak area for each angular bin
  dataStore.angularBinWeight = [];           // place to store the weighting factor for each angular bin
  dataStore.normalizationFactor = [];        // place to store the Normalization Factor for the angular correlation
  dataStore.angularBinData = [];             // place to store the data value for each angular bin. raw area * bin weight * Normalization
  dataStore.angularBinDataUnc = [];          // place to store the data value uncertainty for each angular bin. raw area * bin weight * Normalization
  dataStore.singlesPeakArea = [];            // place to store the peak areas from each angular bin
  dataStore.iteration = 0;

  // angular differences in degrees for the 110mm distance. There are
  // 110mm
  dataStore.angular_bins_110mm = [
    0.000, 18.787, 25.602, 26.690, 31.946, 33.654, 44.364, 46.794, 48.576, 49.798,
    53.834, 60.151, 62.705, 63.086, 65.016, 66.461, 67.456, 69.864, 70.860, 73.084,
    76.381, 78.669, 83.043, 86.228, 86.238, 88.474, 91.526, 93.762, 93.772, 96.957,
    101.331, 103.619, 106.916, 109.140, 110.136, 112.544, 113.539, 114.984, 116.914,
    117.295, 119.849, 126.166, 130.202, 131.424, 133.206, 135.636, 146.346, 148.054,
    153.310, 154.398, 161.213, 180.000
  ];


  // ge_angles_110mm[c1][c2] = angularIndex of the angular_bins_110mm array of angular differences in degrees
  dataStore.ge_angles_110mm = [
    [0,1,3,1,9,11,7,5,19,26,25,17,9,14,20,12,11,20,24,18,6,13,15,8,10,18,14,7,21,28,22,16,31,40,33,27,38,45,43,36,33,41,44,37,23,30,35,29,25,32,34,26,37,42,39,31,50,51,50,48,40,42,46,44],
    [1,0,1,3,14,18,10,7,26,34,32,25,11,18,24,20,9,12,20,14,2,6,8,4,7,11,9,5,22,28,21,16,39,42,37,31,45,49,47,43,40,44,46,42,23,29,35,30,17,25,26,19,33,40,31,27,51,50,48,50,33,37,44,41],
    [3,1,0,1,20,24,18,11,25,32,34,26,7,10,18,14,5,9,11,7,4,8,6,2,14,20,12,9,30,35,29,23,42,46,44,40,43,47,49,45,31,37,42,39,16,21,28,22,19,26,25,17,41,44,37,33,50,48,50,51,27,31,40,33],
    [1,3,1,0,12,20,14,9,17,25,26,19,5,7,11,9,7,14,18,10,8,15,13,6,18,24,20,11,29,35,30,23,37,44,41,33,36,43,45,38,27,33,40,31,16,22,28,21,26,34,32,25,44,46,42,40,48,50,51,50,31,39,42,37],
    [9,14,20,12,0,1,3,1,9,11,7,5,19,26,25,17,33,41,44,37,23,30,35,29,11,20,24,18,6,13,15,8,10,18,14,7,21,28,22,16,31,40,33,27,38,45,43,36,40,42,46,44,25,32,34,26,37,42,39,31,50,51,50,48],
    [11,18,24,20,1,0,1,3,14,18,10,7,26,34,32,25,40,44,46,42,23,29,35,30,9,12,20,14,2,6,8,4,7,11,9,5,22,28,21,16,39,42,37,31,45,49,47,43,33,37,44,41,17,25,26,19,33,40,31,27,51,50,48,50],
    [7,10,18,14,3,1,0,1,20,24,18,11,25,32,34,26,31,37,42,39,16,21,28,22,5,9,11,7,4,8,6,2,14,20,12,9,30,35,29,23,42,46,44,40,43,47,49,45,27,31,40,33,19,26,25,17,41,44,37,33,50,48,50,51],
    [5,7,11,9,1,3,1,0,12,20,14,9,17,25,26,19,27,33,40,31,16,22,28,21,7,14,18,10,8,15,13,6,18,24,20,11,29,35,30,23,37,44,41,33,36,43,45,38,31,39,42,37,26,34,32,25,44,46,42,40,48,50,51,50],
    [19,26,25,17,9,14,20,12,0,1,3,1,9,11,7,5,31,40,33,27,38,45,43,36,33,41,44,37,23,30,35,29,11,20,24,18,6,13,15,8,10,18,14,7,21,28,22,16,50,51,50,48,40,42,46,44,25,32,34,26,37,42,39,31],
    [26,34,32,25,11,18,24,20,1,0,1,3,14,18,10,7,39,42,37,31,45,49,47,43,40,44,46,42,23,29,35,30,9,12,20,14,2,6,8,4,7,11,9,5,22,28,21,16,51,50,48,50,33,37,44,41,17,25,26,19,33,40,31,27],
    [25,32,34,26,7,10,18,14,3,1,0,1,20,24,18,11,42,46,44,40,43,47,49,45,31,37,42,39,16,21,28,22,5,9,11,7,4,8,6,2,14,20,12,9,30,35,29,23,50,48,50,51,27,31,40,33,19,26,25,17,41,44,37,33],
    [17,25,26,19,5,7,11,9,1,3,1,0,12,20,14,9,37,44,41,33,36,43,45,38,27,33,40,31,16,22,28,21,7,14,18,10,8,15,13,6,18,24,20,11,29,35,30,23,48,50,51,50,31,39,42,37,26,34,32,25,44,46,42,40],
    [9,11,7,5,19,26,25,17,9,14,20,12,0,1,3,1,10,18,14,7,21,28,22,16,31,40,33,27,38,45,43,36,33,41,44,37,23,30,35,29,11,20,24,18,6,13,15,8,37,42,39,31,50,51,50,48,40,42,46,44,25,32,34,26],
    [14,18,10,7,26,34,32,25,11,18,24,20,1,0,1,3,7,11,9,5,22,28,21,16,39,42,37,31,45,49,47,43,40,44,46,42,23,29,35,30,9,12,20,14,2,6,8,4,33,40,31,27,51,50,48,50,33,37,44,41,17,25,26,19],
    [20,24,18,11,25,32,34,26,7,10,18,14,3,1,0,1,14,20,12,9,30,35,29,23,42,46,44,40,43,47,49,45,31,37,42,39,16,21,28,22,5,9,11,7,4,8,6,2,41,44,37,33,50,48,50,51,27,31,40,33,19,26,25,17],
    [12,20,14,9,17,25,26,19,5,7,11,9,1,3,1,0,18,24,20,11,29,35,30,23,37,44,41,33,36,43,45,38,27,33,40,31,16,22,28,21,7,14,18,10,8,15,13,6,44,46,42,40,48,50,51,50,31,39,42,37,26,34,32,25],
    [11,9,5,7,33,40,31,27,31,39,42,37,10,7,14,18,0,1,3,1,6,8,4,2,25,26,19,17,43,45,38,36,50,51,50,48,43,45,49,47,25,26,34,32,6,8,15,13,12,20,14,9,44,41,33,37,42,40,44,46,11,18,24,20],
    [20,12,9,14,41,44,37,33,40,42,46,44,18,11,20,24,1,0,1,3,8,6,2,4,26,25,17,19,45,43,36,38,51,50,48,50,45,43,47,49,26,25,32,34,8,6,13,15,9,11,7,5,40,33,27,31,39,31,37,42,7,10,18,14],
    [24,20,11,18,44,46,42,40,33,37,44,41,14,9,12,20,3,1,0,1,15,13,6,8,34,32,25,26,49,47,43,45,50,48,50,51,38,36,43,45,19,17,25,26,4,2,6,8,14,18,10,7,42,37,31,39,31,27,33,40,5,7,11,9],
    [18,14,7,10,37,42,39,31,27,31,40,33,7,5,9,11,1,3,1,0,13,15,8,6,32,34,26,25,47,49,45,43,48,50,51,50,36,38,45,43,17,19,26,25,2,4,8,6,20,24,18,11,46,44,40,42,37,33,41,44,9,14,20,12],
    [6,2,4,8,23,23,16,16,38,45,43,36,21,22,30,29,6,8,15,13,0,1,3,1,6,8,4,2,25,26,19,17,43,45,38,36,50,51,50,48,43,45,49,47,25,26,34,32,6,13,15,8,29,30,22,21,49,45,43,47,28,28,35,35],
    [13,6,8,15,30,29,21,22,45,49,47,43,28,28,35,35,8,6,13,15,1,0,1,3,8,6,2,4,26,25,17,19,45,43,36,38,51,50,48,50,45,43,47,49,26,25,32,34,2,6,8,4,23,23,16,16,45,38,36,43,22,21,29,30],
    [15,8,6,13,35,35,28,28,43,47,49,45,22,21,29,30,4,2,6,8,3,1,0,1,15,13,6,8,34,32,25,26,49,47,43,45,50,48,50,51,38,36,43,45,19,17,25,26,4,8,6,2,30,29,21,22,43,36,38,45,16,16,23,23],
    [8,4,2,6,29,30,22,21,36,43,45,38,16,16,23,23,2,4,8,6,1,3,1,0,13,15,8,6,32,34,26,25,47,49,45,43,48,50,51,50,36,38,45,43,17,19,26,25,8,15,13,6,35,35,28,28,47,43,45,49,21,22,30,29],
    [10,7,14,18,11,9,5,7,33,40,31,27,31,39,42,37,25,26,34,32,6,8,15,13,0,1,3,1,6,8,4,2,25,26,19,17,43,45,38,36,50,51,50,48,43,45,49,47,11,18,24,20,12,20,14,9,44,41,33,37,42,40,44,46],
    [18,11,20,24,20,12,9,14,41,44,37,33,40,42,46,44,26,25,32,34,8,6,13,15,1,0,1,3,8,6,2,4,26,25,17,19,45,43,36,38,51,50,48,50,45,43,47,49,7,10,18,14,9,11,7,5,40,33,27,31,39,31,37,42],
    [14,9,12,20,24,20,11,18,44,46,42,40,33,37,44,41,19,17,25,26,4,2,6,8,3,1,0,1,15,13,6,8,34,32,25,26,49,47,43,45,50,48,50,51,38,36,43,45,5,7,11,9,14,18,10,7,42,37,31,39,31,27,33,40],
    [7,5,9,11,18,14,7,10,37,42,39,31,27,31,40,33,17,19,26,25,2,4,8,6,1,3,1,0,13,15,8,6,32,34,26,25,47,49,45,43,48,50,51,50,36,38,45,43,9,14,20,12,20,24,18,11,46,44,40,42,37,33,41,44],
    [21,22,30,29,6,2,4,8,23,23,16,16,38,45,43,36,43,45,49,47,25,26,34,32,6,8,15,13,0,1,3,1,6,8,4,2,25,26,19,17,43,45,38,36,50,51,50,48,28,28,35,35,6,13,15,8,29,30,22,21,49,45,43,47],
    [28,28,35,35,13,6,8,15,30,29,21,22,45,49,47,43,45,43,47,49,26,25,32,34,8,6,13,15,1,0,1,3,8,6,2,4,26,25,17,19,45,43,36,38,51,50,48,50,22,21,29,30,2,6,8,4,23,23,16,16,45,38,36,43],
    [22,21,29,30,15,8,6,13,35,35,28,28,43,47,49,45,38,36,43,45,19,17,25,26,4,2,6,8,3,1,0,1,15,13,6,8,34,32,25,26,49,47,43,45,50,48,50,51,16,16,23,23,4,8,6,2,30,29,21,22,43,36,38,45],
    [16,16,23,23,8,4,2,6,29,30,22,21,36,43,45,38,36,38,45,43,17,19,26,25,2,4,8,6,1,3,1,0,13,15,8,6,32,34,26,25,47,49,45,43,48,50,51,50,21,22,30,29,8,15,13,6,35,35,28,28,47,43,45,49],
    [31,39,42,37,10,7,14,18,11,9,5,7,33,40,31,27,50,51,50,48,43,45,49,47,25,26,34,32,6,8,15,13,0,1,3,1,6,8,4,2,25,26,19,17,43,45,38,36,42,40,44,46,11,18,24,20,12,20,14,9,44,41,33,37],
    [40,42,46,44,18,11,20,24,20,12,9,14,41,44,37,33,51,50,48,50,45,43,47,49,26,25,32,34,8,6,13,15,1,0,1,3,8,6,2,4,26,25,17,19,45,43,36,38,39,31,37,42,7,10,18,14,9,11,7,5,40,33,27,31],
    [33,37,44,41,14,9,12,20,24,20,11,18,44,46,42,40,50,48,50,51,38,36,43,45,19,17,25,26,4,2,6,8,3,1,0,1,15,13,6,8,34,32,25,26,49,47,43,45,31,27,33,40,5,7,11,9,14,18,10,7,42,37,31,39],
    [27,31,40,33,7,5,9,11,18,14,7,10,37,42,39,31,48,50,51,50,36,38,45,43,17,19,26,25,2,4,8,6,1,3,1,0,13,15,8,6,32,34,26,25,47,49,45,43,37,33,41,44,9,14,20,12,20,24,18,11,46,44,40,42],
    [38,45,43,36,21,22,30,29,6,2,4,8,23,23,16,16,43,45,38,36,50,51,50,48,43,45,49,47,25,26,34,32,6,8,15,13,0,1,3,1,6,8,4,2,25,26,19,17,49,45,43,47,28,28,35,35,6,13,15,8,29,30,22,21],
    [45,49,47,43,28,28,35,35,13,6,8,15,30,29,21,22,45,43,36,38,51,50,48,50,45,43,47,49,26,25,32,34,8,6,13,15,1,0,1,3,8,6,2,4,26,25,17,19,45,38,36,43,22,21,29,30,2,6,8,4,23,23,16,16],
    [43,47,49,45,22,21,29,30,15,8,6,13,35,35,28,28,49,47,43,45,50,48,50,51,38,36,43,45,19,17,25,26,4,2,6,8,3,1,0,1,15,13,6,8,34,32,25,26,43,36,38,45,16,16,23,23,4,8,6,2,30,29,21,22],
    [36,43,45,38,16,16,23,23,8,4,2,6,29,30,22,21,47,49,45,43,48,50,51,50,36,38,45,43,17,19,26,25,2,4,8,6,1,3,1,0,13,15,8,6,32,34,26,25,47,43,45,49,21,22,30,29,8,15,13,6,35,35,28,28],
    [33,40,31,27,31,39,42,37,10,7,14,18,11,9,5,7,25,26,19,17,43,45,38,36,50,51,50,48,43,45,49,47,25,26,34,32,6,8,15,13,0,1,3,1,6,8,4,2,44,41,33,37,42,40,44,46,11,18,24,20,12,20,14,9],
    [41,44,37,33,40,42,46,44,18,11,20,24,20,12,9,14,26,25,17,19,45,43,36,38,51,50,48,50,45,43,47,49,26,25,32,34,8,6,13,15,1,0,1,3,8,6,2,4,40,33,27,31,39,31,37,42,7,10,18,14,9,11,7,5],
    [44,46,42,40,33,37,44,41,14,9,12,20,24,20,11,18,34,32,25,26,49,47,43,45,50,48,50,51,38,36,43,45,19,17,25,26,4,2,6,8,3,1,0,1,15,13,6,8,42,37,31,39,31,27,33,40,5,7,11,9,14,18,10,7],
    [37,42,39,31,27,31,40,33,7,5,9,11,18,14,7,10,32,34,26,25,47,49,45,43,48,50,51,50,36,38,45,43,17,19,26,25,2,4,8,6,1,3,1,0,13,15,8,6,46,44,40,42,37,33,41,44,9,14,20,12,20,24,18,11],
    [23,23,16,16,38,45,43,36,21,22,30,29,6,2,4,8,6,8,4,2,25,26,19,17,43,45,38,36,50,51,50,48,43,45,49,47,25,26,34,32,6,8,15,13,0,1,3,1,29,30,22,21,49,45,43,47,28,28,35,35,6,13,15,8],
    [30,29,21,22,45,49,47,43,28,28,35,35,13,6,8,15,8,6,2,4,26,25,17,19,45,43,36,38,51,50,48,50,45,43,47,49,26,25,32,34,8,6,13,15,1,0,1,3,23,23,16,16,45,38,36,43,22,21,29,30,2,6,8,4],
    [35,35,28,28,43,47,49,45,22,21,29,30,15,8,6,13,15,13,6,8,34,32,25,26,49,47,43,45,50,48,50,51,38,36,43,45,19,17,25,26,4,2,6,8,3,1,0,1,30,29,21,22,43,36,38,45,16,16,23,23,4,8,6,2],
    [29,30,22,21,36,43,45,38,16,16,23,23,8,4,2,6,13,15,8,6,32,34,26,25,47,49,45,43,48,50,51,50,36,38,45,43,17,19,26,25,2,4,8,6,1,3,1,0,35,35,28,28,47,43,45,49,21,22,30,29,8,15,13,6],
    [25,17,19,26,40,33,27,31,50,51,50,48,37,33,41,44,12,9,14,20,6,2,4,8,11,7,5,9,28,22,16,21,42,39,31,37,49,45,43,47,44,40,42,46,29,23,30,35,0,1,3,1,18,14,7,10,34,26,25,32,18,11,20,24],
    [32,25,26,34,42,37,31,39,51,50,48,50,42,40,44,46,20,11,18,24,13,6,8,15,18,10,7,14,28,21,16,22,40,31,27,33,45,38,36,43,41,33,37,44,30,23,29,35,1,0,1,3,11,9,5,7,26,19,17,25,14,9,12,20],
    [34,26,25,32,46,44,40,42,50,48,50,51,39,31,37,42,14,7,10,18,15,8,6,13,24,18,11,20,35,29,23,30,44,37,33,41,43,36,38,45,33,27,31,40,22,16,21,28,3,1,0,1,20,12,9,14,25,17,19,26,7,5,9,11],
    [26,19,17,25,44,41,33,37,48,50,51,50,31,27,33,40,9,5,7,11,8,4,2,6,20,14,9,12,35,30,23,29,46,42,40,44,47,43,45,49,37,31,39,42,21,16,22,28,1,3,1,0,24,20,11,18,32,25,26,34,10,7,14,18],
    [37,33,41,44,25,17,19,26,40,33,27,31,50,51,50,48,44,40,42,46,29,23,30,35,12,9,14,20,6,2,4,8,11,7,5,9,28,22,16,21,42,39,31,37,49,45,43,47,18,11,20,24,0,1,3,1,18,14,7,10,34,26,25,32],
    [42,40,44,46,32,25,26,34,42,37,31,39,51,50,48,50,41,33,37,44,30,23,29,35,20,11,18,24,13,6,8,15,18,10,7,14,28,21,16,22,40,31,27,33,45,38,36,43,14,9,12,20,1,0,1,3,11,9,5,7,26,19,17,25],
    [39,31,37,42,34,26,25,32,46,44,40,42,50,48,50,51,33,27,31,40,22,16,21,28,14,7,10,18,15,8,6,13,24,18,11,20,35,29,23,30,44,37,33,41,43,36,38,45,7,5,9,11,3,1,0,1,20,12,9,14,25,17,19,26],
    [31,27,33,40,26,19,17,25,44,41,33,37,48,50,51,50,37,31,39,42,21,16,22,28,9,5,7,11,8,4,2,6,20,14,9,12,35,30,23,29,46,42,40,44,47,43,45,49,10,7,14,18,1,3,1,0,24,20,11,18,32,25,26,34],
    [50,51,50,48,37,33,41,44,25,17,19,26,40,33,27,31,42,39,31,37,49,45,43,47,44,40,42,46,29,23,30,35,12,9,14,20,6,2,4,8,11,7,5,9,28,22,16,21,34,26,25,32,18,11,20,24,0,1,3,1,18,14,7,10],
    [51,50,48,50,42,40,44,46,32,25,26,34,42,37,31,39,40,31,27,33,45,38,36,43,41,33,37,44,30,23,29,35,20,11,18,24,13,6,8,15,18,10,7,14,28,21,16,22,26,19,17,25,14,9,12,20,1,0,1,3,11,9,5,7],
    [50,48,50,51,39,31,37,42,34,26,25,32,46,44,40,42,44,37,33,41,43,36,38,45,33,27,31,40,22,16,21,28,14,7,10,18,15,8,6,13,24,18,11,20,35,29,23,30,25,17,19,26,7,5,9,11,3,1,0,1,20,12,9,14],
    [48,50,51,50,31,27,33,40,26,19,17,25,44,41,33,37,46,42,40,44,47,43,45,49,37,31,39,42,21,16,22,28,9,5,7,11,8,4,2,6,20,14,9,12,35,30,23,29,32,25,26,34,10,7,14,18,1,3,1,0,24,20,11,18],
    [40,33,27,31,50,51,50,48,37,33,41,44,25,17,19,26,11,7,5,9,28,22,16,21,42,39,31,37,49,45,43,47,44,40,42,46,29,23,30,35,12,9,14,20,6,2,4,8,18,14,7,10,34,26,25,32,18,11,20,24,0,1,3,1],
    [42,37,31,39,51,50,48,50,42,40,44,46,32,25,26,34,18,10,7,14,28,21,16,22,40,31,27,33,45,38,36,43,41,33,37,44,30,23,29,35,20,11,18,24,13,6,8,15,11,9,5,7,26,19,17,25,14,9,12,20,1,0,1,3],
    [46,44,40,42,50,48,50,51,39,31,37,42,34,26,25,32,24,18,11,20,35,29,23,30,44,37,33,41,43,36,38,45,33,27,31,40,22,16,21,28,14,7,10,18,15,8,6,13,20,12,9,14,25,17,19,26,7,5,9,11,3,1,0,1],
    [44,41,33,37,48,50,51,50,31,27,33,40,26,19,17,25,20,14,9,12,35,30,23,29,46,42,40,44,47,43,45,49,37,31,39,42,21,16,22,28,9,5,7,11,8,4,2,6,24,20,11,18,32,25,26,34,10,7,14,18,1,3,1,0]
  ];

// angular differences in degrees between HPGe crystal centers for the 145mm distance.
  dataStore.angular_bins_145mm = [
   0.000, 15.442, 21.905, 29.143, 33.143, 38.382, 44.57, 47.445, 48.741, 51.473,
    55.170, 59.978, 60.102, 62.340, 62.492, 63.423, 68.957, 71.431, 73.358, 73.629,
     75.774, 80.942, 81.546, 83.894, 86.868, 88.966, 91.034, 93.132, 96.106, 98.454,
      99.058, 104.226, 106.371, 106.642, 108.569, 111.043, 116.577, 117.508, 117.660,
      119.898, 120.022, 124.830, 128.527, 131.259, 132.555, 135.430, 141.618, 146.857,
       150.857, 158.095, 164.558, 180.000
  ];

  // ge_angles_145mm[c1][c2] = angularIndex of the angular_bins_145mm array of angular differences in degrees
  dataStore.ge_angles_145mm = [
    [0,1,2,1,9,12,8,5,20,26,25,19,9,15,18,14,12,18,22,16,6,11,13,7,10,16,15,8,21,27,23,17,33,39,35,29,40,45,44,38,35,41,43,36,24,30,34,28,25,31,32,26,36,42,37,33,50,51,50,49,39,42,46,43],
    [1,0,1,2,15,16,10,8,26,32,31,25,12,16,22,18,9,14,18,15,3,6,7,4,8,12,9,5,23,27,21,17,37,42,36,33,45,48,47,44,39,43,46,42,24,28,34,30,19,25,26,20,35,39,33,29,51,50,49,50,35,36,43,41],
    [2,1,0,1,18,22,16,12,25,31,32,26,8,10,16,15,5,9,12,8,4,7,6,3,15,18,14,9,30,34,28,24,42,46,43,39,44,47,48,45,33,36,42,37,17,21,27,23,20,26,25,19,41,43,36,35,50,49,50,51,29,33,39,35],
    [1,2,1,0,14,18,15,9,19,25,26,20,5,8,12,9,8,15,16,10,7,13,11,6,16,22,18,12,28,34,30,24,36,43,41,35,38,44,45,40,29,35,39,33,17,23,27,21,26,32,31,25,43,46,42,39,49,50,51,50,33,37,42,36],
    [9,15,18,14,0,1,2,1,9,12,8,5,20,26,25,19,35,41,43,36,24,30,34,28,12,18,22,16,6,11,13,7,10,16,15,8,21,27,23,17,33,39,35,29,40,45,44,38,39,42,46,43,25,31,32,26,36,42,37,33,50,51,50,49],
    [12,16,22,18,1,0,1,2,15,16,10,8,26,32,31,25,39,43,46,42,24,28,34,30,9,14,18,15,3,6,7,4,8,12,9,5,23,27,21,17,37,42,36,33,45,48,47,44,35,36,43,41,19,25,26,20,35,39,33,29,51,50,49,50],
    [8,10,16,15,2,1,0,1,18,22,16,12,25,31,32,26,33,36,42,37,17,21,27,23,5,9,12,8,4,7,6,3,15,18,14,9,30,34,28,24,42,46,43,39,44,47,48,45,29,33,39,35,20,26,25,19,41,43,36,35,50,49,50,51],
    [5,8,12,9,1,2,1,0,14,18,15,9,19,25,26,20,29,35,39,33,17,23,27,21,8,15,16,10,7,13,11,6,16,22,18,12,28,34,30,24,36,43,41,35,38,44,45,40,33,37,42,36,26,32,31,25,43,46,42,39,49,50,51,50],
    [20,26,25,19,9,15,18,14,0,1,2,1,9,12,8,5,33,39,35,29,40,45,44,38,35,41,43,36,24,30,34,28,12,18,22,16,6,11,13,7,10,16,15,8,21,27,23,17,50,51,50,49,39,42,46,43,25,31,32,26,36,42,37,33],
    [26,32,31,25,12,16,22,18,1,0,1,2,15,16,10,8,37,42,36,33,45,48,47,44,39,43,46,42,24,28,34,30,9,14,18,15,3,6,7,4,8,12,9,5,23,27,21,17,51,50,49,50,35,36,43,41,19,25,26,20,35,39,33,29],
    [25,31,32,26,8,10,16,15,2,1,0,1,18,22,16,12,42,46,43,39,44,47,48,45,33,36,42,37,17,21,27,23,5,9,12,8,4,7,6,3,15,18,14,9,30,34,28,24,50,49,50,51,29,33,39,35,20,26,25,19,41,43,36,35],
    [19,25,26,20,5,8,12,9,1,2,1,0,14,18,15,9,36,43,41,35,38,44,45,40,29,35,39,33,17,23,27,21,8,15,16,10,7,13,11,6,16,22,18,12,28,34,30,24,49,50,51,50,33,37,42,36,26,32,31,25,43,46,42,39],
    [9,12,8,5,20,26,25,19,9,15,18,14,0,1,2,1,10,16,15,8,21,27,23,17,33,39,35,29,40,45,44,38,35,41,43,36,24,30,34,28,12,18,22,16,6,11,13,7,36,42,37,33,50,51,50,49,39,42,46,43,25,31,32,26],
    [15,16,10,8,26,32,31,25,12,16,22,18,1,0,1,2,8,12,9,5,23,27,21,17,37,42,36,33,45,48,47,44,39,43,46,42,24,28,34,30,9,14,18,15,3,6,7,4,35,39,33,29,51,50,49,50,35,36,43,41,19,25,26,20],
    [18,22,16,12,25,31,32,26,8,10,16,15,2,1,0,1,15,18,14,9,30,34,28,24,42,46,43,39,44,47,48,45,33,36,42,37,17,21,27,23,5,9,12,8,4,7,6,3,41,43,36,35,50,49,50,51,29,33,39,35,20,26,25,19],
    [14,18,15,9,19,25,26,20,5,8,12,9,1,2,1,0,16,22,18,12,28,34,30,24,36,43,41,35,38,44,45,40,29,35,39,33,17,23,27,21,8,15,16,10,7,13,11,6,43,46,42,39,49,50,51,50,33,37,42,36,26,32,31,25],
    [12,9,5,8,35,39,33,29,33,37,42,36,10,8,15,16,0,1,2,1,6,7,4,3,25,26,20,19,44,45,40,38,50,51,50,49,44,45,48,47,25,26,32,31,6,7,13,11,14,18,15,9,43,41,35,36,42,39,43,46,12,16,22,18],
    [18,14,9,15,41,43,36,35,39,42,46,43,16,12,18,22,1,0,1,2,7,6,3,4,26,25,19,20,45,44,38,40,51,50,49,50,45,44,47,48,26,25,31,32,7,6,11,13,9,12,8,5,39,35,29,33,37,33,36,42,8,10,16,15],
    [22,18,12,16,43,46,42,39,35,36,43,41,15,9,14,18,2,1,0,1,13,11,6,7,32,31,25,26,48,47,44,45,50,49,50,51,40,38,44,45,20,19,25,26,4,3,6,7,15,16,10,8,42,36,33,37,33,29,35,39,5,8,12,9],
    [16,15,8,10,36,42,37,33,29,33,39,35,8,5,9,12,1,2,1,0,11,13,7,6,31,32,26,25,47,48,45,44,49,50,51,50,38,40,45,44,19,20,26,25,3,4,7,6,18,22,16,12,46,43,39,42,36,35,41,43,9,15,18,14],
    [6,3,4,7,24,24,17,17,40,45,44,38,21,23,30,28,6,7,13,11,0,1,2,1,6,7,4,3,25,26,20,19,44,45,40,38,50,51,50,49,44,45,48,47,25,26,32,31,6,11,13,7,28,30,23,21,48,45,44,47,27,27,34,34],
    [11,6,7,13,30,28,21,23,45,48,47,44,27,27,34,34,7,6,11,13,1,0,1,2,7,6,3,4,26,25,19,20,45,44,38,40,51,50,49,50,45,44,47,48,26,25,31,32,3,6,7,4,24,24,17,17,45,40,38,44,23,21,28,30],
    [13,7,6,11,34,34,27,27,44,47,48,45,23,21,28,30,4,3,6,7,2,1,0,1,13,11,6,7,32,31,25,26,48,47,44,45,50,49,50,51,40,38,44,45,20,19,25,26,4,7,6,3,30,28,21,23,44,38,40,45,17,17,24,24],
    [7,4,3,6,28,30,23,21,38,44,45,40,17,17,24,24,3,4,7,6,1,2,1,0,11,13,7,6,31,32,26,25,47,48,45,44,49,50,51,50,38,40,45,44,19,20,26,25,7,13,11,6,34,34,27,27,47,44,45,48,21,23,30,28],
    [10,8,15,16,12,9,5,8,35,39,33,29,33,37,42,36,25,26,32,31,6,7,13,11,0,1,2,1,6,7,4,3,25,26,20,19,44,45,40,38,50,51,50,49,44,45,48,47,12,16,22,18,14,18,15,9,43,41,35,36,42,39,43,46],
    [16,12,18,22,18,14,9,15,41,43,36,35,39,42,46,43,26,25,31,32,7,6,11,13,1,0,1,2,7,6,3,4,26,25,19,20,45,44,38,40,51,50,49,50,45,44,47,48,8,10,16,15,9,12,8,5,39,35,29,33,37,33,36,42],
    [15,9,14,18,22,18,12,16,43,46,42,39,35,36,43,41,20,19,25,26,4,3,6,7,2,1,0,1,13,11,6,7,32,31,25,26,48,47,44,45,50,49,50,51,40,38,44,45,5,8,12,9,15,16,10,8,42,36,33,37,33,29,35,39],
    [8,5,9,12,16,15,8,10,36,42,37,33,29,33,39,35,19,20,26,25,3,4,7,6,1,2,1,0,11,13,7,6,31,32,26,25,47,48,45,44,49,50,51,50,38,40,45,44,9,15,18,14,18,22,16,12,46,43,39,42,36,35,41,43],
    [21,23,30,28,6,3,4,7,24,24,17,17,40,45,44,38,44,45,48,47,25,26,32,31,6,7,13,11,0,1,2,1,6,7,4,3,25,26,20,19,44,45,40,38,50,51,50,49,27,27,34,34,6,11,13,7,28,30,23,21,48,45,44,47],
    [27,27,34,34,11,6,7,13,30,28,21,23,45,48,47,44,45,44,47,48,26,25,31,32,7,6,11,13,1,0,1,2,7,6,3,4,26,25,19,20,45,44,38,40,51,50,49,50,23,21,28,30,3,6,7,4,24,24,17,17,45,40,38,44],
    [23,21,28,30,13,7,6,11,34,34,27,27,44,47,48,45,40,38,44,45,20,19,25,26,4,3,6,7,2,1,0,1,13,11,6,7,32,31,25,26,48,47,44,45,50,49,50,51,17,17,24,24,4,7,6,3,30,28,21,23,44,38,40,45],
    [17,17,24,24,7,4,3,6,28,30,23,21,38,44,45,40,38,40,45,44,19,20,26,25,3,4,7,6,1,2,1,0,11,13,7,6,31,32,26,25,47,48,45,44,49,50,51,50,21,23,30,28,7,13,11,6,34,34,27,27,47,44,45,48],
    [33,37,42,36,10,8,15,16,12,9,5,8,35,39,33,29,50,51,50,49,44,45,48,47,25,26,32,31,6,7,13,11,0,1,2,1,6,7,4,3,25,26,20,19,44,45,40,38,42,39,43,46,12,16,22,18,14,18,15,9,43,41,35,36],
    [39,42,46,43,16,12,18,22,18,14,9,15,41,43,36,35,51,50,49,50,45,44,47,48,26,25,31,32,7,6,11,13,1,0,1,2,7,6,3,4,26,25,19,20,45,44,38,40,37,33,36,42,8,10,16,15,9,12,8,5,39,35,29,33],
    [35,36,43,41,15,9,14,18,22,18,12,16,43,46,42,39,50,49,50,51,40,38,44,45,20,19,25,26,4,3,6,7,2,1,0,1,13,11,6,7,32,31,25,26,48,47,44,45,33,29,35,39,5,8,12,9,15,16,10,8,42,36,33,37],
    [29,33,39,35,8,5,9,12,16,15,8,10,36,42,37,33,49,50,51,50,38,40,45,44,19,20,26,25,3,4,7,6,1,2,1,0,11,13,7,6,31,32,26,25,47,48,45,44,36,35,41,43,9,15,18,14,18,22,16,12,46,43,39,42],
    [40,45,44,38,21,23,30,28,6,3,4,7,24,24,17,17,44,45,40,38,50,51,50,49,44,45,48,47,25,26,32,31,6,7,13,11,0,1,2,1,6,7,4,3,25,26,20,19,48,45,44,47,27,27,34,34,6,11,13,7,28,30,23,21],
    [45,48,47,44,27,27,34,34,11,6,7,13,30,28,21,23,45,44,38,40,51,50,49,50,45,44,47,48,26,25,31,32,7,6,11,13,1,0,1,2,7,6,3,4,26,25,19,20,45,40,38,44,23,21,28,30,3,6,7,4,24,24,17,17],
    [44,47,48,45,23,21,28,30,13,7,6,11,34,34,27,27,48,47,44,45,50,49,50,51,40,38,44,45,20,19,25,26,4,3,6,7,2,1,0,1,13,11,6,7,32,31,25,26,44,38,40,45,17,17,24,24,4,7,6,3,30,28,21,23],
    [38,44,45,40,17,17,24,24,7,4,3,6,28,30,23,21,47,48,45,44,49,50,51,50,38,40,45,44,19,20,26,25,3,4,7,6,1,2,1,0,11,13,7,6,31,32,26,25,47,44,45,48,21,23,30,28,7,13,11,6,34,34,27,27],
    [35,39,33,29,33,37,42,36,10,8,15,16,12,9,5,8,25,26,20,19,44,45,40,38,50,51,50,49,44,45,48,47,25,26,32,31,6,7,13,11,0,1,2,1,6,7,4,3,43,41,35,36,42,39,43,46,12,16,22,18,14,18,15,9],
    [41,43,36,35,39,42,46,43,16,12,18,22,18,14,9,15,26,25,19,20,45,44,38,40,51,50,49,50,45,44,47,48,26,25,31,32,7,6,11,13,1,0,1,2,7,6,3,4,39,35,29,33,37,33,36,42,8,10,16,15,9,12,8,5],
    [43,46,42,39,35,36,43,41,15,9,14,18,22,18,12,16,32,31,25,26,48,47,44,45,50,49,50,51,40,38,44,45,20,19,25,26,4,3,6,7,2,1,0,1,13,11,6,7,42,36,33,37,33,29,35,39,5,8,12,9,15,16,10,8],
    [36,42,37,33,29,33,39,35,8,5,9,12,16,15,8,10,31,32,26,25,47,48,45,44,49,50,51,50,38,40,45,44,19,20,26,25,3,4,7,6,1,2,1,0,11,13,7,6,46,43,39,42,36,35,41,43,9,15,18,14,18,22,16,12],
    [24,24,17,17,40,45,44,38,21,23,30,28,6,3,4,7,6,7,4,3,25,26,20,19,44,45,40,38,50,51,50,49,44,45,48,47,25,26,32,31,6,7,13,11,0,1,2,1,28,30,23,21,48,45,44,47,27,27,34,34,6,11,13,7],
    [30,28,21,23,45,48,47,44,27,27,34,34,11,6,7,13,7,6,3,4,26,25,19,20,45,44,38,40,51,50,49,50,45,44,47,48,26,25,31,32,7,6,11,13,1,0,1,2,24,24,17,17,45,40,38,44,23,21,28,30,3,6,7,4],
    [34,34,27,27,44,47,48,45,23,21,28,30,13,7,6,11,13,11,6,7,32,31,25,26,48,47,44,45,50,49,50,51,40,38,44,45,20,19,25,26,4,3,6,7,2,1,0,1,30,28,21,23,44,38,40,45,17,17,24,24,4,7,6,3],
    [28,30,23,21,38,44,45,40,17,17,24,24,7,4,3,6,11,13,7,6,31,32,26,25,47,48,45,44,49,50,51,50,38,40,45,44,19,20,26,25,3,4,7,6,1,2,1,0,34,34,27,27,47,44,45,48,21,23,30,28,7,13,11,6],
    [25,19,20,26,39,35,29,33,50,51,50,49,36,35,41,43,14,9,15,18,6,3,4,7,12,8,5,9,27,23,17,21,42,37,33,36,48,45,44,47,43,39,42,46,28,24,30,34,0,1,2,1,16,15,8,10,32,26,25,31,16,12,18,22],
    [31,25,26,32,42,36,33,37,51,50,49,50,42,39,43,46,18,12,16,22,11,6,7,13,16,10,8,15,27,21,17,23,39,33,29,35,45,40,38,44,41,35,36,43,30,24,28,34,1,0,1,2,12,9,5,8,26,20,19,25,15,9,14,18],
    [32,26,25,31,46,43,39,42,50,49,50,51,37,33,36,42,15,8,10,16,13,7,6,11,22,16,12,18,34,28,24,30,43,36,35,41,44,38,40,45,35,29,33,39,23,17,21,27,2,1,0,1,18,14,9,15,25,19,20,26,8,5,9,12],
    [26,20,19,25,43,41,35,36,49,50,51,50,33,29,35,39,9,5,8,12,7,4,3,6,18,15,9,14,34,30,24,28,46,42,39,43,47,44,45,48,36,33,37,42,21,17,23,27,1,2,1,0,22,18,12,16,31,25,26,32,10,8,15,16],
    [36,35,41,43,25,19,20,26,39,35,29,33,50,51,50,49,43,39,42,46,28,24,30,34,14,9,15,18,6,3,4,7,12,8,5,9,27,23,17,21,42,37,33,36,48,45,44,47,16,12,18,22,0,1,2,1,16,15,8,10,32,26,25,31],
    [42,39,43,46,31,25,26,32,42,36,33,37,51,50,49,50,41,35,36,43,30,24,28,34,18,12,16,22,11,6,7,13,16,10,8,15,27,21,17,23,39,33,29,35,45,40,38,44,15,9,14,18,1,0,1,2,12,9,5,8,26,20,19,25],
    [37,33,36,42,32,26,25,31,46,43,39,42,50,49,50,51,35,29,33,39,23,17,21,27,15,8,10,16,13,7,6,11,22,16,12,18,34,28,24,30,43,36,35,41,44,38,40,45,8,5,9,12,2,1,0,1,18,14,9,15,25,19,20,26],
    [33,29,35,39,26,20,19,25,43,41,35,36,49,50,51,50,36,33,37,42,21,17,23,27,9,5,8,12,7,4,3,6,18,15,9,14,34,30,24,28,46,42,39,43,47,44,45,48,10,8,15,16,1,2,1,0,22,18,12,16,31,25,26,32],
    [50,51,50,49,36,35,41,43,25,19,20,26,39,35,29,33,42,37,33,36,48,45,44,47,43,39,42,46,28,24,30,34,14,9,15,18,6,3,4,7,12,8,5,9,27,23,17,21,32,26,25,31,16,12,18,22,0,1,2,1,16,15,8,10],
    [51,50,49,50,42,39,43,46,31,25,26,32,42,36,33,37,39,33,29,35,45,40,38,44,41,35,36,43,30,24,28,34,18,12,16,22,11,6,7,13,16,10,8,15,27,21,17,23,26,20,19,25,15,9,14,18,1,0,1,2,12,9,5,8],
    [50,49,50,51,37,33,36,42,32,26,25,31,46,43,39,42,43,36,35,41,44,38,40,45,35,29,33,39,23,17,21,27,15,8,10,16,13,7,6,11,22,16,12,18,34,28,24,30,25,19,20,26,8,5,9,12,2,1,0,1,18,14,9,15],
    [49,50,51,50,33,29,35,39,26,20,19,25,43,41,35,36,46,42,39,43,47,44,45,48,36,33,37,42,21,17,23,27,9,5,8,12,7,4,3,6,18,15,9,14,34,30,24,28,31,25,26,32,10,8,15,16,1,2,1,0,22,18,12,16],
    [39,35,29,33,50,51,50,49,36,35,41,43,25,19,20,26,12,8,5,9,27,23,17,21,42,37,33,36,48,45,44,47,43,39,42,46,28,24,30,34,14,9,15,18,6,3,4,7,16,15,8,10,32,26,25,31,16,12,18,22,0,1,2,1],
    [42,36,33,37,51,50,49,50,42,39,43,46,31,25,26,32,16,10,8,15,27,21,17,23,39,33,29,35,45,40,38,44,41,35,36,43,30,24,28,34,18,12,16,22,11,6,7,13,12,9,5,8,26,20,19,25,15,9,14,18,1,0,1,2],
    [46,43,39,42,50,49,50,51,37,33,36,42,32,26,25,31,22,16,12,18,34,28,24,30,43,36,35,41,44,38,40,45,35,29,33,39,23,17,21,27,15,8,10,16,13,7,6,11,18,14,9,15,25,19,20,26,8,5,9,12,2,1,0,1],
    [43,41,35,36,49,50,51,50,33,29,35,39,26,20,19,25,18,15,9,14,34,30,24,28,46,42,39,43,47,44,45,48,36,33,37,42,21,17,23,27,9,5,8,12,7,4,3,6,22,18,12,16,31,25,26,32,10,8,15,16,1,2,1,0]
    ];




  //custom element config
  dataStore.plots = ['Spectra'];                                          //names of plotGrid cells and spectrumViewer objects

  dataStore.resolutionData = [];                                      //dygraphs-sorted peak widths for both peaks, in same order as THESEdetectors: [[detectorIndex, low peak width, high peak width], ...]
  dataStore.lowPeakResolution = [];                                   //low energy peak resolutions, indexed per GRIFFINdetectors
  dataStore.lowPeakResolution.fillN(0,(dataStore.numberOfClovers*4*2));                             //start with zeroes
  dataStore.midPeakResolution = [];                                  //as midPeakResolution
  dataStore.midPeakResolution.fillN(0,(dataStore.numberOfClovers*4*2));                            //start with zeroes
  dataStore.highPeakResolution = [];                                  //as highPeakResolution
  dataStore.highPeakResolution.fillN(0,(dataStore.numberOfClovers*4*2));                           //start with zeroes
  dataStore.vhiPeakResolution = [];                                  //as highPeakResolution
  dataStore.vhiPeakResolution.fillN(0,(dataStore.numberOfClovers*4*2));                            //start with zeroes
  dataStore.searchRegionP1 = [];                                         //[x_start, x_finish, y for peak search bar]
  dataStore.searchRegionP2 = [];                                         //[x_start, x_finish, y for peak search bar]
  dataStore.searchRegionP3 = [];                                         //[x_start, x_finish, y for peak search bar]
  dataStore.searchRegionP4 = [];                                         //[x_start, x_finish, y for peak search bar]

  dataStore.modeType = 'Histo';                                         //mode of operation: Online or Histo.
  dataStore.modeChoice = [                                               // Mode choice (online/histogram file) information to generate buttons
    {"name": "Online", "text": "Use online data"},
    {"name": "Histo", "text": "Use a histogram file"}
  ];

  dataStore.detectorChoice = [{"name": "HPGe"},{"name": "PACES"}];       // Detector choice information to generate buttons
  dataStore.detectorType = 'HPGe';                                       // The selected Detector choice

  dataStore.currentTask = 'Setup';               // keep track of which task we are on to determine the behaviour of certain function. Mostly used to decide where to write fit results. Singles, Summing
  dataStore.currentSource = '133Ba';                                           // index for the dataStore.sourceInfo while looping through sources.
  dataStore.sourceCalibration = {                                              // NIST-certification of 60Co sources. Used for calculating absolute efficiency.
    'R-0793': {"date": 1180724400,  "activity": 38480, "halflife": 1.66372e+8, "lambda": 4.1653e-9},
    'R-0850': {"date": 1221505200,  "activity": 35350, "halflife": 1.66372e+8, "lambda": 4.1653e-9},
    'R-1105': {"date": 1462129200,  "activity": 38180, "halflife": 1.66372e+8, "lambda": 4.1653e-9}
  };
  dataStore.sourceInfo = {                                                  // Source information and settings
    '133Ba' : {"name": "Ba-133", "title": "133Ba", 'histoFileName' : '', "maxXValue": 2000,       // General source details
    "literaturePeaks": [ //53.16,
      // 79.61,     // 79 and 80keV are hard to fit. Omit to start with. Would be helpful for detemrining the turn-over point.
      80,        // This peak is the sum of 79 and 80keV - fit them as one.
      276.4,
      302.85,
      356.01,
      383.85 ],     // Peak energies from this source. Literature values taken from ENSDF.

      "literatureIntensity":    [ /*0.02141,*/ 0.32949, 0.07161, 0.18336, 0.62050, 0.08941 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
      "literatureIntensityUnc": [ /*0.00032,*/ 0.00326, 0.00049, 0.00125, 0.00190, 0.00062 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
      "peakWidth": 3,                     // integer number of channels used for gating. [centroid-peakWidth ... centroid+peakWidth]
      "ROIWidth": 10,                      // integer number of channels used for setting ROI limits. [centroid-peakWidth ... centroid+peakWidth]
      "uncalibratedCentroids": [],
      "calibratedCentroids": [],
      "uncorrectedArea": [],
      "uncorrectedAreaUnc": [],
      "correctedArea": [],
      "correctedAreaUnc": [],
      "FWHM": [],
      "FCorrectionFactor": [],           // F factor determined from the number of active/inactive crystals which contribute to the 180 degree coincidence matrix
      "summingInCorrectionPeaks": [ //[[]],// An array of arrays of literautre peak energies which need to be gated on and fit to obtain the summing-In correction for the corresponding (by index number) 'literaturePeak'
        [[]], // for 80keV
        [[53.16,223]],      // for 276keV. 79 and 80keV are hard to fit.
        [[223,79.61]],      // for 302keV. 79 and 80keV are hard to fit.
        [[276.4,79.61],[53.16,302.85]], // for 356keV
        [[302.85,80],[223,160]] ],   // for 383keV
        "summingInCorrectionCounts": [],  // An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
        "summingInCorrectionCountsUnc": [],  // Uncertainty in An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
        "summingOutCorrectionCounts": [],    // An array of the counts found in the 180 degree coincidence matrix projection.
        "summingOutCorrectionCountsUnc": [], // Uncertainty in An array of the counts found in the 180 degree coincidence matrix projection.
        "rawEfficiency": [],                 // Relative efficiency calculated for this peak energy before summing corrections
        "rawEfficiencyUnc": [],              // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections
        "relativeEfficiency": [],            // Relative efficiency calculated for this peak energy after summing corrections
        "relativeEfficiencyUnc": [],         // Uncertainty for relative efficiency calculated for this peak energy after summing corrections
        "normalizedEfficiency": [],          // Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
        "normalizedEfficiencyUnc": [],       // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
        "normalizationFactorParameter": [],  // paremeters of the fitting used to determine the Normalization factor
        "normalizationFactor": 0,            // Normalization factor for the relative efficiency curve of this source
        "normalizationAbsFactor": 0,         // Normalization factor for the absolute efficiency curve of this source
        "absoluteEfficiency": [],            // Absolute efficiency calculated for this peak energy after summing corrections
        "absoluteEfficiencyUnc": [],         // Uncertainty for Absolute efficiency calculated for this peak energy after summing corrections
      },
      '152Eu' : {"name": "Eu-152", "title": "152Eu", 'histoFileName' : '', "maxXValue": 2000,       // General source details
      "literaturePeaks": [ 121.8, 244.7, 344.3, 411.1, 778.9, 867.4, 964.0,
        //	 1085.8,  // for 1085.8 keV. Doublet is hard to fit, omit for now.
        //	 1089.7,  // for 1089.7 keV. Doublet is hard to fit, omit for now.
        1112.1,
        //	 1212.9,  // low statistics, omit for now.
        //	 1299.1,  // low statistics, omit for now.
        1408.0 ],     // Peak energies from this source. Literature values taken from ENSDF.
        "literatureIntensity":    [ 0.28531, 0.07549, 0.26590, 0.02237, 0.12928, 0.04228, 0.14510, 0.13667, 0.20868 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
        "literatureIntensityUnc": [ 0.00159, 0.00041, 0.00120, 0.00012, 0.00083, 0.00030, 0.00069, 0.00083, 0.00093 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
        "peakWidth": 3,                     // integer number of channels used for gating. [centroid-peakWidth ... centroid+peakWidth]
        "ROIWidth": 10,                      // integer number of channels used for setting ROI limits. [centroid-peakWidth ... centroid+peakWidth]
        "uncalibratedCentroids": [],
        "calibratedCentroids": [],
        "uncorrectedArea": [],
        "uncorrectedAreaUnc": [],
        "correctedArea": [],
        "correctedAreaUnc": [],
        "FWHM": [],
        "FCorrectionFactor": [],           // F factor determined from the number of active/inactive crystals which contribute to the 180 degree coincidence matrix
        "summingInCorrectionPeaks": [ [[]],  [[]],  [[]],  [[]], // An array of arrays of literautre peak energies which need to be gated on and fit to obtain the summing-In correction for the corresponding (by index number) 'literaturePeak'
        [[367,411.1],[192,586]], // for 778.9 keV
        [[210,656],[148,719],[423,444]], // for 867.4 keV
        [[719,244.7],[401,562],[275,689]], // for 964.0 keV
        // [[964,121],[275,810]],           // for 1085.8 keV. Doublet is hard to fit, omit for now.
        //  [[678,411],[503,586],[324,764]], // for 1089.7 keV. Doublet is hard to fit, omit for now.
        [[867.4,244.7],[688,423],[210,901],[148,964.0]], // for 1112.1 keV
        //  [[768,444],[556,656],[538,674],[493,719],[345,867],[286,926],[207,1005]], // for 1212.9 keV. low statistics, omit for now.
        //  [[712,586],[534,764],[520,778],[328,970],[324,974],[209,1089]], // for 1299.1 keV. low statistics, omit for now.
        [[719,688],[566,841],[488,919],[443,964.0],[295,1112.1],[237,1170]] // for 1408.0 keV
      ],
      "summingInCorrectionCounts": [],  // An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
      "summingInCorrectionCountsUnc": [],  // Uncertainty in An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
      "summingOutCorrectionCounts": [],    // An array of the counts found in the 180 degree coincidence matrix projection.
      "summingOutCorrectionCountsUnc": [], // Uncertainty in An array of the counts found in the 180 degree coincidence matrix projection.
      "rawEfficiency": [],                 // Relative efficiency calculated for this peak energy before summing corrections
      "rawEfficiencyUnc": [],              // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections
      "relativeEfficiency": [],            // Relative efficiency calculated for this peak energy after summing corrections
      "relativeEfficiencyUnc": [],         // Uncertainty for relative efficiency calculated for this peak energy after summing corrections
      "normalizedEfficiency": [],          // Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
      "normalizedEfficiencyUnc": [],       // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
      "normalizationFactorParameter": [],  // paremeters of the fitting used to determine the Normalization factor
      "normalizationFactor": 0,            // Normalization factor for the relative efficiency curve of this source
      "normalizationAbsFactor": 0,         // Normalization factor for the absolute efficiency curve of this source
      "absoluteEfficiency": [],            // Absolute efficiency calculated for this peak energy after summing corrections
      "absoluteEfficiencyUnc": [],         // Uncertainty for Absolute efficiency calculated for this peak energy after summing corrections
    },
    '56Co' : {"name":  "Co-56", "title":  "56Co", 'histoFileName' : '', "maxXValue":4000,       // General source details
    "literaturePeaks": [ 846.76, 1037.84, 1175.1, 1238.29, 1360.21, 1771.35, 2015.18, 2034.76, 2598.46, 3201.95, 3253.42, 3272.99, 3451.15, 3548.27 ],     // Peak energies from this source. Literature values taken from ENSDF.
    "literatureIntensity":    [ 0.99940, 0.14052, 0.02252, 0.66460, 0.04283, 0.15411, 0.03016, 0.07769, 0.16970, 0.03209, 0.07923, 0.01876, 0.00949, 0.00196 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
    "literatureIntensityUnc": [ 0.00002, 0.00040, 0.00006, 0.00120, 0.00012, 0.00060, 0.00012, 0.00028, 0.00040, 0.00012, 0.00021, 0.00002, 0.00005, 0.00002 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
    "peakWidth": 3,                     // integer number of channels used for gating. [centroid-peakWidth ... centroid+peakWidth]
    "ROIWidth": 10,                      // integer number of channels used for setting ROI limits. [centroid-peakWidth ... centroid+peakWidth]
    "uncalibratedCentroids": [],
    "calibratedCentroids": [],
    "uncorrectedArea": [],
    "uncorrectedAreaUnc": [],
    "correctedArea": [],
    "correctedAreaUnc": [],
    "FWHM": [],
    "FCorrectionFactor": [],           // F factor determined from the number of active/inactive crystals which contribute to the 180 degree coincidence matrix
    "summingInCorrectionPeaks": [ [[]],  [[]],  [[]],  [[]],  [[]], // An array of arrays of literautre peak energies which need to be gated on and fit to obtain the summing-In correction for the corresponding (by index number) 'literaturePeak'
    [[733,1037.84],[411,1360]], // for 1771.35 keV
    [[977,1037.84],[655,1360]], // for 2015.18 keV
    [[996,1037.84],[674,1360],[263,1771]], // for 2034.76 keV
    [[1360,1238],[787,1810]], // for 2598.46 keV
    [[1963,1238],[1088,2113]], // for 3201.95 keV
    [[2015.18,1238],[1442,1810],[1140,2113],[977,2276],[655,2598.46]], // for 3253.42 keV
    [[2034,1238],[1462,1810],[1159,2113],[996,2276],[674,2598.46],[263,3009]], // for 3272 keV
    [[2212,1238],[1640,1810],[1175.1,2276],[852,2598.46]], // for 3451.15 keV
    [[1271,2276]] // for 3548.27 keV
  ],
  "summingInCorrectionCounts": [],  // An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
  "summingOutCorrectionCounts": [], // An array of the counts found in the 180 degree coincidence matrix projection.
  "summingInCorrectionCountsUnc": [],  // Uncertainty in An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
  "summingOutCorrectionCounts": [],    // An array of the counts found in the 180 degree coincidence matrix projection.
  "summingOutCorrectionCountsUnc": [], // Uncertainty in An array of the counts found in the 180 degree coincidence matrix projection.
  "rawEfficiency": [],                 // Relative efficiency calculated for this peak energy before summing corrections
  "rawEfficiencyUnc": [],              // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections
  "relativeEfficiency": [],            // Relative efficiency calculated for this peak energy after summing corrections
  "relativeEfficiencyUnc": [],         // Uncertainty for relative efficiency calculated for this peak energy after summing corrections
  "normalizedEfficiency": [],          // Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
  "normalizedEfficiencyUnc": [],       // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
  "normalizationFactorParameter": [],  // paremeters of the fitting used to determine the Normalization factor
  "normalizationFactor": 0,            // Normalization factor for the relative efficiency curve of this source
  "normalizationAbsFactor": 0,         // Normalization factor for the absolute efficiency curve of this source
  "absoluteEfficiency": [],            // Absolute efficiency calculated for this peak energy after summing corrections
  "absoluteEfficiencyUnc": [],         // Uncertainty for Absolute efficiency calculated for this peak energy after summing corrections
},
'60Co' : {"name":  "Co-60", "title":  "60Co", 'histoFileName' : '', "maxXValue": 2000,       // General source details
"literaturePeaks": [ 1173.23, 1332.49],     // Peak energies from this source. Literature values taken from ENSDF.
"literatureIntensity": [ 0.9985, 0.999826 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
"literatureIntensityUnc": [ 0.0003, 0.000006 ], // Peak intensities from this source. Literature values taken from ENSDF (gamma rays per 100 decays of the parent).
"peakWidth": 3,                     // integer number of channels used for gating. [centroid-peakWidth ... centroid+peakWidth]
"ROIWidth": 10,                      // integer number of channels used for setting ROI limits. [centroid-peakWidth ... centroid+peakWidth]
"uncalibratedCentroids": [],
"calibratedCentroids": [],
"uncorrectedArea": [],
"uncorrectedAreaUnc": [],
"correctedArea": [],
"correctedAreaUnc": [],
"FWHM": [],
"FCorrectionFactor": [],           // F factor determined from the number of active/inactive crystals which contribute to the 180 degree coincidence matrix
"summingInCorrectionPeaks": [ [[]], [[]] ],   // An array of arrays of literautre peak energies which need to be gated on and fit to obtain the summing-In correction for the corresponding (by index number) 'literaturePeak'
"summingInCorrectionCounts": [],     // An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
"summingInCorrectionCountsUnc": [],  // Uncertainty in An array of arrays of the counts found in the peak in the 180 degree coincidence matrix projection.
"summingOutCorrectionCounts": [],    // An array of the counts found in the 180 degree coincidence matrix projection.
"summingOutCorrectionCountsUnc": [], // Uncertainty in An array of the counts found in the 180 degree coincidence matrix projection.
"rawEfficiency": [],                 // Relative efficiency calculated for this peak energy before summing corrections
"rawEfficiencyUnc": [],              // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections
"relativeEfficiency": [],            // Relative efficiency calculated for this peak energy after summing corrections
"relativeEfficiencyUnc": [],         // Uncertainty for relative efficiency calculated for this peak energy after summing corrections
"normalizedEfficiency": [],          // Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
"normalizedEfficiencyUnc": [],       // Uncertainty for Relative efficiency calculated for this peak energy before summing corrections, normalized to 152Eu
"normalizationFactorParameter": [],  // paremeters of the fitting used to determine the Normalization factor
"normalizationFactor": 0,            // Normalization factor for the relative efficiency curve of this source
"normalizationAbsFactor": 0,         // Normalization factor for the absolute efficiency curve of this source
"absoluteEfficiency": [],            // Absolute efficiency calculated for this peak energy after summing corrections
"absoluteEfficiencyUnc": [],         // Uncertainty for Absolute efficiency calculated for this peak energy after summing corrections
"sourceCalibration": {},             // NIST-certified calibration details for this source
"Midas": {},                          // Midas info of this historgram file; Title, StartTime, Duration
"timeSinceCertification": 0,         // time in seconds between the certification of the source activity and the start of the run
"sourceActivity": 0,                // source Activity in becquerels at the start of the run
"sourceTotalDecaysDuringThisRun": 0 // Total number of decays of this source during this run
}
};
dataStore.sourceInfoPACES = [
  {"name": "PACES",  "title": "PACES 207Bi", "lowEnergy":  74.97, "midEnergy":  481.69, "highEnergy":  975.65, "vhiEnergy": 1682.22, "maxXValue":2000 }
];

dataStore.spectrumListSingles = {};                               // List of all the Singles Sum spectra
dataStore.spectrumListHits = {};                                  // List of all the Hitpattern spectra
dataStore.spectrumListOpp = {};                                   // List of all the 180degree coincidence matrices
dataStore.spectrumListProjections = {};                           // List of all projections from the 180degree coincidence matrices
dataStore.spectrumListProjectionsPeaks = {};                      // List of peaks to fit for each projection from the 180degree coincidence matrix
dataStore.progressBarNumberTasks = 0;                             // Total count of tasks (spectra to fetch, projections to make, peaks to fit) for use with the progress bar
dataStore.progressBarTasksCompleted =0;                           // Number of tasks completed so far for use with the progress bar

dataStore.cellIndex = dataStore.plots.length;

//resolution plot
dataStore._dataplot = [];                 // Place for all dataplot objects to be created as an array. This makes them indexable and iteratable
dataStore.dataplotData = [[],[]];                                       // place for dataplot data
dataStore.dataplotDataX = [[],[]];                                       // place for dataplot data
dataStore.dataplotDataY = [[],[]];                                       // place for dataplot data
dataStore.efficiencyPlotDataKeyMap = ['Abs', 'Rel', '133Ba', '152Eu', '56Co', '60Co'];
dataStore.efficiencyPlotEquationParameters = [[],[]];
dataStore.efficiencyPlotData = [];
dataStore.efficiencyPlotDataUnc = [[],[],[],[],[],[]]; // Y uncertainty values for drawing the error bars
dataStore.efficiencyPlotY2Data = [];
dataStore.efficiencyPlotY2Data[0] = [];
dataStore.efficiencyPlotY2Data[1] = [];
dataStore.efficiencyPlotXData = [];
dataStore.efficiencyPlotXData[0] = [];
dataStore.efficiencyPlotXData[1] = [];
dataStore.efficiencyPlotData[0] = [];    // Absolute efficiency
dataStore.plotInitData = [];
dataStore.plotInitData[0] = [[0,0], [1,0], [2,0], [3,0], [4,0]];      //initial dummy data
dataStore.YAxisMinValue = [[0,0], [0,0], [0,0], [0,0], [0,0], [0,0]];
dataStore.YAxisMaxValue = [[0,0], [0,0], [0,0], [0,0], [0,0], [0,0]];
dataStore.annotations = [0,0];
dataStore.plotStyle = [];
dataStore.plotStyle[0] = {                                              //dygraphs style object
  labels: ["cos(theta)", "Normalized Counts"],
  title: 'GRIFFIN Gamma-gamma angular correlation',
  axisLabelColor: '#FFFFFF',
  colors: ["#AAE66A", "#EFB2F0", "#B2D1F0", "#F0DBB2"],
  labelsDiv: 'dataPlot0Legend',
  drawPoints: true,
//  underlayCallback: drawDygraphCanvasObjects,
  pointSize: 5,
  highlightCircleSize: 7,
  strokeWidth: 0.0,
  legend: 'always',
  axes: {
    x: {
      valueRange: [0,5000]
    },

    y : {
      valueRange: [0,10]
    }
  }
}


    // resolve the promise
    resolve('Success!');
    });

}

// Control the initial load workflow
function onloadInitialSetup(){

    // Return a new promise.
    return new Promise(function(resolve, reject) {

// Set up the data store. Once that is done then the event listeners can be added.
    Promise.all([
	setupDataStore(),
	promiseURLArguments()
    ]
	       ).then(
		   function(){
             // setupEventListeners is usually the callback of GetURLArguments. Here we used a promise, so trigger that callback now.
             //initializeAngularCorrelations();
             console.log("All promises resolved");
       		   }
	       )

    });

}

function drawDygraphCanvasObjects(ctx, area, layout) {

    // Identify which graph this is
            if(layout.maindiv_.id.includes('Abs')){
              var thisPlotID = 0;
            }else if(layout.maindiv_.id.includes('Rel')){
              var thisPlotID = 1;
            }else{ console.log('Unrecognized Div for dygraph drawEfficiencyLine'); return;}

  // Bail out if there is no data yet
  if (typeof(dataStore._dataplot[thisPlotID].dygraph) == 'undefined') return;  // won't be set on the initial draw.
  if (dataStore.efficiencyPlotData.length<1) return;  // won't be set on the initial draw.
  if (dataStore.efficiencyPlotData[thisPlotID].length<1) return;  // won't be set on the initial draw.

    drawDygraphEfficiencyLine(thisPlotID, ctx, area, layout);
    drawDygraphErrorBars(thisPlotID, ctx, area, layout);
}

function drawDygraphEfficiencyLine(thisPlotID, ctx, area, layout) {
  console.log('drawLines');

  var range = [0,5000];
  var params = dataStore.efficiencyPlotEquationParameters[thisPlotID];
  var color = '#E67E22';
  var step = 1;
  //ctx.save();
  ctx.strokeStyle = color;
  ctx.lineWidth = 3.0;

  var y1 = HPGeEfficiency(params, Math.log(parseFloat(range[0]/1000)));
  var p1 = dataStore._dataplot[thisPlotID].dygraph.toDomCoords(range[0], y1);
  ctx.beginPath();
  ctx.moveTo(0, -1);
  ctx.lineTo(p1[0], p1[1]);
  for(i=range[0]+step; i<=range[1]; i+=step){
    // HPGeEfficiency() expects energy in MeV and the natural log.
    y1 = HPGeEfficiency(params, Math.log(parseFloat(i/1000)));
    var p1 = dataStore._dataplot[thisPlotID].dygraph.toDomCoords(i, y1);
    ctx.lineTo(p1[0], p1[1]);
  }
  ctx.stroke();
  //ctx.restore();
}

function drawDygraphErrorBars(thisPlotID, ctx, area, layout) {
  console.log('drawErrorBars');
  console.log(dataStore.efficiencyPlotXData[thisPlotID]);
  console.log(dataStore.efficiencyPlotData[thisPlotID]);
  console.log(dataStore.efficiencyPlotDataUnc[thisPlotID]);

  var range = [0,5000];
  var params = dataStore.efficiencyPlotEquationParameters[thisPlotID];
  var color = '#AAE66A';
  var step = 1;
  ctx.strokeStyle = color;
  ctx.lineWidth = 2.5;

  for(i=0; i<dataStore.efficiencyPlotXData[thisPlotID].length; i++){
    x1 = dataStore.efficiencyPlotXData[thisPlotID][i];
    y1 = dataStore.efficiencyPlotData[thisPlotID][i] - dataStore.efficiencyPlotDataUnc[thisPlotID][i];
    y2 = dataStore.efficiencyPlotData[thisPlotID][i] + dataStore.efficiencyPlotDataUnc[thisPlotID][i];
  //  y1 = dataStore.efficiencyPlotData[thisPlotID][i] * 0.8;
//    y2 = dataStore.efficiencyPlotData[thisPlotID][i] *1.2;
    var p1 = dataStore._dataplot[thisPlotID].dygraph.toDomCoords(x1, y1);
    var p2 = dataStore._dataplot[thisPlotID].dygraph.toDomCoords(x1, y2);

    //ctx.save();
    ctx.beginPath();
    ctx.moveTo(p1[0], p1[1]);
    ctx.lineTo(p2[0], p2[1]);
    ctx.stroke();
    //ctx.restore();
  }

}

function initializeAngularCorrelations(){
console.log("initializeAngularCorrelations()");
      // this is the main setup and start of the automatic process.

   // Display the histogram directory and filename received from the URL
   document.getElementById('histo-list-server-div').innerHTML = dataStore.histoFileDirectoryPath;
   document.getElementById('histo-list-menu-div').innerHTML = dataStore.histoFileName;

  // Custom settings for Angular Correlations
  //generate the groups for plot selector
  var groups = [];
  groups.push({
    "groupID": 'Angular Bins',
    "groupTitle": 'Angular Bins',
    "plots": []
  });
  var histoName = dataStore.histoFileName.split(".")[0] + ":";
  for(i=1; i<(dataStore.numberOfClovers+1); i++){
  groups.push({
    "groupID": 'GRG' + alwaysThisLong(i, 2),
    "groupTitle": 'Singles GRG' + alwaysThisLong(i, 2),
    "plots": [
      {
        "plotID": histoName+'GRG' + alwaysThisLong(i, 2) + 'BN00A_Energy',
        "title": 'GRG' + alwaysThisLong(i, 2) + 'BN00A'
      },
      {
        "plotID": histoName+'GRG' + alwaysThisLong(i, 2) + 'GN00A_Energy',
        "title": 'GRG' + alwaysThisLong(i, 2) + 'GN00A'
      },
      {
        "plotID": histoName+'GRG' + alwaysThisLong(i, 2) + 'RN00A_Energy',
        "title": 'GRG' + alwaysThisLong(i, 2) + 'RN00A'
      },
      {
        "plotID": histoName+'GRG' + alwaysThisLong(i, 2) + 'WN00A_Energy',
        "title": 'GRG' + alwaysThisLong(i, 2) + 'WN00A'
      }
    ]
  })
  }
  dataStore.plotGroups = groups;     //groups to arrange detectors into for dropdowns
  console.log(dataStore);
  console.log(dataStore._plotControl);

      // Generate the spectrum lists based on the list of detectors
      dataStore._plotListLite = new plotListLite('plotList');
      dataStore._plotListLite.setup();

      // Generate the angularCorrelations report table
      dataStore._angularCorrelationsReport = new angularCorrelationsReport('angularCorrelationsReportWrap');
      dataStore._angularCorrelationsReport.setup();

      // Draw the search region
      dataStore.viewers[dataStore.plots[0]].plotData();

      //plug in special fit controls
    //  document.getElementById('refitButton').onclick = dataStore._angularCorrelationsReport.toggleFitMode;

      // Plug in the active spectra names for the 1d histograms
     // if(typeof(dataStore._plotControl.activeSpectra) === 'undefined'){ dataStore._plotControl.activeSpectra = []; }
      for(i=0; i<dataStore.THESEdetectors.length; i++){
        dataStore._plotControl.activeSpectra.push(dataStore.THESEdetectors[i] + "_Energy");
        dataStore.singlesSpectra.push(dataStore.histoFileName.split(".")[0]+":"+dataStore.THESEdetectors[i] + "_Energy");
      }
      // Plug in the active spectra names for the 2d histograms
      for(i=0; i<dataStore.angularMatrices.length; i++){
        dataStore._plotControl.active2dSpectra.push(dataStore.angularMatrices[i]);
      }

  	  // Count the total number of matrices to download for use in the progress bar
  	  dataStore.progressBarNumberTasks = 52;

      // Set the current task to keep track of our progress
      dataStore.currentTask = 'Fetching';

      // Request spectra from the server. This launches a series of promises. Once complete we end with fetchCallback.
      console.log(dataStore);
      console.log('Fetching 1d and 2d histograms');
      dataStore._plotControl.refreshAll();

}


function fetchCallback(){
    console.log('fetchCallback');
    console.log(dataStore);


        // Create the objects for each matrix in the local storage
        createAllLocalMatrices();

console.log("finished unpacking");
console.log(dataStore);

// Hide the progress bar
//document.getElementById('progressDiv').classList.add('hidden');

// change messages
deleteNode('downloadMessage');
document.getElementById('readyMessage').classList.remove('hidden');

// Enable the input buttons
document.getElementById('gamma1Input').disabled = false;
document.getElementById('gamma2Input').disabled = false;
document.getElementById('ggAngCorrProject').disabled = false;
}

async function createAllLocalMatrices(){

  // Create the objects for each matrix in the local storage
  for(let i=1; i<dataStore.angularMatrices.length; i++){

    // Update the progress bar
    let status = 49+i;
    let message = "complete";
    dataStore.ProgressValue = parseInt(status);
    document.getElementById('progressGGAngCorr').setAttribute('style', "width:" + status + "%" );
    document.getElementById('progressGGAngCorr').innerHTML = status + "% " + message;
    console.log("Progress value = " + dataStore.ProgressValue);

    // Process the next matrix before updating the progress bar again
    await createLocalMatrices(i);

  } // End of for loop

}

async function createLocalMatrices(i){

  // Return a new promise.
  return new Promise(function(resolve) {

    // Create the new object for this matrix in the local storage
    var thisKey = dataStore.histoFileName.split(".")[0] + ":" + dataStore.angularMatrices[i];
    console.log("Creating "+thisKey);
    var thisMatrix = {
      "name" : dataStore.rawData[thisKey].name,
      "xlength" : dataStore.rawData[thisKey].XaxisLength,
      "ylength" : dataStore.rawData[thisKey].YaxisLength,
      "xmin" : dataStore.rawData[thisKey].XaxisMin,
      "ymin" : dataStore.rawData[thisKey].YaxisMin,
      "xmax" : dataStore.rawData[thisKey].XaxisMax,
      "ymax" : dataStore.rawData[thisKey].YaxisMax,
      "zmin" : dataStore.rawData[thisKey].ZaxisMin,
      "zmax" : dataStore.rawData[thisKey].ZaxisMax,
      "zminfull" : dataStore.rawData[thisKey].ZaxisMin,
      "zmaxfull" : dataStore.rawData[thisKey].ZaxisMax,
      "data" : []
    };
    dataStore.matrix[thisKey] = thisMatrix;

    // Unpack the raw data to the local storage
    // The last argument as false, suppresses the generation of a colorMap used for displaying as a heatmap
    // Unpack the compressed matrix data received from the server
    var thisMatrixData = packZcompressed(dataStore.rawData[thisKey].data2, dataStore.rawData[thisKey].XaxisLength, dataStore.rawData[thisKey].YaxisLength, dataStore.rawData[thisKey].ZaxisMax, false);

    // Trim the matrix and save it in the object
    dataStore.matrix[thisKey].data = trimMatrix(thisMatrixData,3);

    // Delete the raw version to reduce total memory usage
    delete dataStore.rawData[thisKey];
    console.log(i);

    // resolve the promise
    setTimeout(function(){resolve('Success!')},5);
  });

}


function updateProgressBar(status,message){
  dataStore.ProgressValue = parseInt(status);
  document.getElementById('progress').setAttribute('style', "width:" + status + "%" );
  document.getElementById('progress').innerHTML = status + "% " + message;
  $(window).trigger('resize');
}

async function promiseUpdateProgressBar(status,message){

        // Return a new promise.
        return new Promise(function(resolve, reject) {
  dataStore.ProgressValue = parseInt(status);
  document.getElementById('progress').setAttribute('style', "width:" + status + "%" );
  document.getElementById('progress').innerHTML = status + "% " + message;

      // resolve the promise
      resolve('Success!');
      });
}

function projectAngularCorrelations(){
  //make the projections for the matrix of each source based on the peaks defined.
  console.log(dataStore);

  // change messages
  document.getElementById('readyMessage').classList.add('hidden');
  document.getElementById('projectionsMessage').classList.remove('hidden');

  //keep track of whatever was originally plotted so we can return to it
  buffer = dataStore.currentPlot

  // Get the peak energies from the User input
  var g1E = parseInt(document.getElementById('gamma1Input').value);
  var g2E = parseInt(document.getElementById('gamma2Input').value);
  var gateWidth = 3;

  // Use the higher energy peak as the gate because that will likely give less background
  var gateE = (g1E > g2E) ? g1E : g2E;
  var fitE  = (g1E > g2E) ? g2E : g1E;

  // Save these to the dataStore for use during the fitting
  dataStore.gatePeakEnergy = gateE;
  dataStore.fitPeakEnergies = [fitE]; // Must be an array in order to fit N peaks per spectrum
  dataStore.peakWidth = parseInt(gateWidth*2);

  // Set limits for the projections
  var min = gateE - gateWidth;
  var max = gateE + gateWidth;

  // Get the list of keys for the matrices to be projected
  matrixKeys = Object.keys(dataStore.matrix);

  releaser(
    function(i){
      // Change rawData to another list that is just the Sum_Energy_ spectrum
      var matrixKeys = Object.keys(dataStore.matrix);

      // Set the details for this matrix needed by the projectYaxis function
      dataStore.activeMatrix = matrixKeys[i];
      dataStore.hm._raw = dataStore.matrix[matrixKeys[i]].data;

      plotName = projectYaxis(min,max);
      console.log('Created '+plotName);
      // Add this projection to the rawData storage for plotting
      dataStore.rawData[plotName] = dataStore.createdSpectra[plotName];
      // Add this projection spectrum to the list which need to be fitted
      dataStore.angCorrProjections.push(plotName);

      // Add this projection to the spectrum menu

      newMenuItem = document.createElement('li');
      newMenuItem.setAttribute('id', 'plotList'+plotName);
      newMenuItem.setAttribute('value', plotName);
      newMenuItem.setAttribute('class', 'list-group-item toggle');
      newMenuItem.innerHTML = plotName.split(':')[1].trim()+'<span id=\'plotListbadge'+plotName+'\' class=\"badge plotPresence hidden\">&#x2713;</span>';
      document.getElementById('plotListplots'+"Angular Bins").appendChild(newMenuItem);
      document.getElementById('plotList'+plotName).onclick = function(){ dataStore._plotListLite.exclusivePlot(this.id.split('plotList')[1], dataStore.viewers[dataStore.plots[0]]); }

    }.bind(this),

    function(){
      //leave the viewer pointing at the first spectrum for fitting
      dispatcher({target: buffer}, 'fitAllComplete')
      console.log('Completed all projections.');

      projectionsCallback();
    }.bind(this),

    matrixKeys.length-1
  )
};




function projectionsCallback(){
    console.log('projectionsCallback');
    console.log(dataStore);

    console.log('Projections have been made so all spectra are ready for fitting.');
    console.log('Ready to fit all spectra');

    // change messages
    deleteNode('projectionsMessage');

    // Fit the peaks in the projections
    // Then fit the peaks in the singles spectra
    // Provide the list of 1d histogram keys
    // second argument is the callback function, and third argument is the argument to be passed to that callback
  //  fitPeaksInSeriesOfHistograms(dataStore.angCorrProjections,fitPeaksInSeriesOfHistograms,dataStore.singlesSpectra);
  fitPeaksInSeriesOfHistograms(dataStore.angCorrProjections);

/*
    var argumentsList = [dataStore.angCorrProjections,dataStore.singlesSpectra];


    let firstPromise = new Promise(function(myResolve, myReject) {
      fitPeaksInSeriesOfHistograms(dataStore.angCorrProjections);
      resolve('Success!');
    });

    firstPromise.then(
      (value) => {
        console.log("Then of first promise");
        let secondPromise = new Promise(function(myResolve, myReject) {
          fitPeaksInSeriesOfHistograms(dataStore.singlesSpectra);
          resolve('Success!');
        });

        secondPromise.then(
          (value) => {
            console.log("Then of second promise");

            // Do this after all fitting is completed
            // Arrange the angular bin peak areas, calculate weighting factors and normalization factor
            console.log("All fitting is complete, now calculate the results");
            console.log(dataStore);
          }
        );
      }
    );
*/


}


function fitPeaksInSeriesOfHistograms(spectra){
    //fit all spectra to the peaks defined.

    console.log(dataStore);

    // Return a new promise.
    return new Promise(function(resolve, reject) {


    // Get the list of keys
    var i, keys = spectra,
    buffer = dataStore.currentPlot //keep track of whatever was originally plotted so we can return to it

    //dump data so there is one displayed at a time
    dataStore.viewers[dataStore.plots[0]].removeData(dataStore.currentPlot);

    releaser(
      function(i){
        // Change rawData to another list that is just the Sum_Energy_ spectrum
        var keys = spectra;
        fitSpectra(keys[i])
      }.bind(this),

      function(){
        var evt;
        //set up fit line re-drawing
        dataStore.viewers[dataStore.plots[0]].drawCallback = addFitLines;

        //leave the viewer pointing at the first spectrum for fitting
      //  dispatcher({target: buffer}, 'fitAllComplete');

        // resolve the promise
        //console.log("Resolve the promise");
        //resolve('Success!');
        if(dataStore.iteration == 0){
          dataStore.iteration++;
          dataStore.fitPeakEnergies.push(dataStore.gatePeakEnergy);
          fitPeaksInSeriesOfHistograms(dataStore.singlesSpectra);
        }else if(dataStore.iteration == 1){
          dataStore.iteration++;
          processAngularCorrelationData();
        }

      }.bind(this),

      keys.length-1
    )

  }); // end of promise definition

  }


    function fitSpectra(spectrum){
      //redo the fits for the named spectrum.
      //<spectrum>: string; name of spectrum, per names from analyzer

    console.log("fitSpectra for "+spectrum);

      var peakIndex = 0;
      var viewerName = dataStore.plots[0];

      //set up fitting for this spectrum/source
      dataStore.currentPlot = spectrum;
      dataStore.viewers[viewerName].plotData() //kludge to update limits, could be nicer
      dataStore.viewers[viewerName].fitTarget = spectrum;
      dataStore._plotListLite.exclusivePlot(spectrum, dataStore.viewers[dataStore.plots[0]]);

      //locate the spectrum in the dataStore
      if(spectrum in dataStore.createdSpectra){ // true if spectrum is a key of createdSpectra
                //set up the spectrum data for fitting
                dataStore.viewers[viewerName].addData(spectrum, JSON.parse(JSON.stringify(dataStore.createdSpectra[spectrum])) );
      }else if(spectrum in dataStore.rawData){
                //set up the spectrum data for fitting
                dataStore.viewers[viewerName].addData(spectrum, JSON.parse(JSON.stringify(dataStore.rawData[spectrum])) );
      }else{
        console.log("Failed to locate spectrum data for \'"+spectrum+"\' in fitSpectra");
        return;
      }

        // Loop through the peaks to fit for this projection
        for(peakIndex=0; peakIndex<dataStore.fitPeakEnergies.length; peakIndex++){

          //set up peak fit
          console.log('fitting '+spectrum+', peak '+peakIndex);
          dataStore.currentPeak = peakIndex;
          dataStore.viewers[viewerName].FitLimitLower = dataStore.fitPeakEnergies[peakIndex] - dataStore.peakWidth;
          dataStore.viewers[viewerName].FitLimitUpper = dataStore.fitPeakEnergies[peakIndex] + dataStore.peakWidth;
          dataStore.viewers[viewerName].fitData(spectrum, 0);
        }

      //dump data so it doesn't stack up
      dataStore.viewers[viewerName].removeData(spectrum);
    }


    function fitCallback(center, width, amplitude, intercept, slope){
        //after fitting, log the fit results, as well as any modification made to the ROI by the fitting algortihm
        //also update table
        //<center>: number; center of gaussian peak
        //<width>: number; width of peak
        //<amplitude>: number; amplitude of peak
        //<intercept>: number; intercept of linear background beneath peak
        //<slope>: number; slope of linear background
        console.log("fitCallback");

        var refitPeak = document.getElementById('refitPeakButton');
        var viewerName = dataStore.plots[0];

        // update the progress bar?
        //dataStore.progressBarTasksCompleted++;
        //console.log('Tasks completed '+dataStore.progressBarTasksCompleted+' of '+dataStore.progressBarNumberTasks+' tasks, '+(dataStore.progressBarTasksCompleted / dataStore.progressBarNumberTasks)+'.');
        //document.getElementById('progress').setAttribute('style', 'width:' + ((75*(dataStore.progressBarTasksCompleted / dataStore.progressBarNumberTasks))+25) + '%' );

        // Calculate peak area here
        var grossArea = 0,
        netArea = 0,
        integral = 0,
        functionVals = [],
        i, x, sigmas = 5, stepSize = 0.01;
        //calculate peak area in excess of background, for <sigmas> up and down.
        for(i=0; i<2*sigmas*width/stepSize; i++){
          x = center - sigmas*width + i*stepSize
          functionVals.push( gauss(amplitude, center, width, x)*stepSize )
          integral = functionVals.integrate()
        }
        var area = parseInt(integral.toFixed(0));

          //keep track of fit results and peak area
          console.log("Save fit results for "+dataStore.currentPlot+", "+dataStore.currentPeak);
          if(!dataStore.fitResults[dataStore.currentPlot]) dataStore.fitResults[dataStore.currentPlot] = [];
          dataStore.fitResults[dataStore.currentPlot][dataStore.currentPeak] = [amplitude, center, width, intercept, slope, area];

          // Update the ROI in case they were modified by the fitting routine
          // DO WE NEED ROI ANY MORE?
          //dataStore.ROI[dataStore.currentSource][dataStore.currentPeak][0] = dataStore.viewers[viewerName].FitLimitLower;
          //dataStore.ROI[dataStore.currentSource][dataStore.currentPeak][1] = dataStore.viewers[viewerName].FitLimitUpper;

          //convenient to arrange resolution data here
        //  dataStore.sourceInfo[dataStore.currentSource].FWHM[dataStore.currentPeak] = (width*2.35).toFixed(2);

        //disengage fit mode buttons
        if( parseInt(refitPeak.getAttribute('engaged'),10) == 1)
        refitPeak.onclick();
      }



    function addFitLines(){
        //add current fits to the plot
        console.log('addFitLines in angularCorrections');
        return;

        var fitLines = [];
        var lower, upper, middle
        viewerName = dataStore.plots[0];

        dataStore.viewers[viewerName].containerFit.removeAllChildren();

        // Set the current Source for this spectrum
        dataStore.currentSource = Object.keys(dataStore.sourceInfo).find(key => dataStore.sourceInfo[key].histoFileName.split('.')[0] === dataStore.currentPlot.split(':')[0])
        console.log('addFitLines for '+dataStore.currentPlot+', identify key '+dataStore.currentSource+' during '+dataStore.currentTask);


          // fitting projections for summing corrections
          console.log(dataStore);
          console.log(dataStore.ROIprojections);
          console.log(dataStore.fitResultsProjections);
          console.log(dataStore.currentSource);
          console.log(dataStore.currentPlot);

          // Bail out of no fitResults yet
          if(!dataStore.fitResultsProjections[dataStore.currentPlot]){
            console.log('No fitResults yet for '+dataStore.currentPlot+' in addFitLines so bailing out');
            return;
          }

          // Loop through the peaks for this spectrum
          for(i=0; i<dataStore.spectrumListProjectionsPeaks[dataStore.currentPlot].peaks.length; i++){
            //add fit lines
            console.log('Add fit lines for '+dataStore.currentPlot+', peak '+i);
            fitLines[i] = dataStore.viewers[viewerName].addFitLine(
              dataStore.ROIprojections[dataStore.currentPlot][i][0],
              dataStore.ROIprojections[dataStore.currentPlot][i][1] - dataStore.ROIprojections[dataStore.currentPlot][i][0],
              dataStore.fitResultsProjections[dataStore.currentPlot][i][0],
              dataStore.fitResultsProjections[dataStore.currentPlot][i][1],
              dataStore.fitResultsProjections[dataStore.currentPlot][i][2],
              dataStore.fitResultsProjections[dataStore.currentPlot][i][3],
              dataStore.fitResultsProjections[dataStore.currentPlot][i][4]
            );

            dataStore.viewers[viewerName].containerFit.addChild(fitLines[i]);
          }


        dataStore.viewers[viewerName].stage.update();
      }

function processAngularCorrelationData(){
  console.log("processAngularCorrelationData()");
  console.log(dataStore);

  var sumAngularBinAreas = 0;
  var sumSinglesAreas = [0,0];

  // Collect the angular bin peak areas
  for(var i=0; i<dataStore.angCorrProjections.length; i++){
     dataStore.angularBinPeakArea[i] = dataStore.fitResults[dataStore.angCorrProjections[i]][0][5];
     sumAngularBinAreas += dataStore.angularBinPeakArea[i];
     dataStore.angularBinWeight[i] = 0; // zero the weighting factors here
  }
  dataStore.normalizationFactor = sumAngularBinAreas;
  console.log("dataStore.normalizationFactor = "+dataStore.normalizationFactor);

  // Collect the singles peak areas
  for(i=0; i<dataStore.singlesSpectra.length; i++){
     dataStore.singlesPeakArea[i] = [0,0]; // initalize this element
     dataStore.singlesPeakArea[i][0] = dataStore.fitResults[dataStore.singlesSpectra[i]][0][5]; // the fit energy peak
     dataStore.singlesPeakArea[i][1] = dataStore.fitResults[dataStore.singlesSpectra[i]][1][5]; // the gate energy peak
     sumSinglesAreas[0] += dataStore.singlesPeakArea[i][0]; // the fit energy peak
     sumSinglesAreas[1] += dataStore.singlesPeakArea[i][1]; // the gate energy peak
  }

  console.log(sumAngularBinAreas);
  console.log(sumSinglesAreas[0]);
  console.log(sumSinglesAreas[1]);

console.log(dataStore);

  // Calculate the weighting factors
  for(i=0; i<64; i++){
  for(var j=0; j<64; j++){
    var angleIndex = dataStore.ge_angles_145mm[i][j];
    dataStore.angularBinWeight[angleIndex] += (dataStore.singlesPeakArea[i][0]/sumSinglesAreas[0])*(dataStore.singlesPeakArea[j][1]/sumSinglesAreas[1]) * 0.5;
    dataStore.angularBinWeight[angleIndex] += (dataStore.singlesPeakArea[j][0]/sumSinglesAreas[0])*(dataStore.singlesPeakArea[i][1]/sumSinglesAreas[1]) * 0.5;
 }
}

console.log("Angular Correlation Data:");
// Calculate the angular correlation data points
for(i=0; i<dataStore.angularBinPeakArea.length; i++){
dataStore.angularBinData[i] = dataStore.angularBinPeakArea[i] / (dataStore.angularBinWeight[i] * dataStore.normalizationFactor);
//console.log(i+" = "+dataStore.angularBinData[i]+", W= "+dataStore.angularBinWeight[i]);
console.log(dataStore.angular_bins_145mm[i]+","+dataStore.angularBinData[i]);
}

// Plot the data
populateDataPlot();
}

    function populateDataPlot(){
      // First determine the residuals by applying the calibration coefficients to the fitted centroid, then comparing it to the literature energy.
      // Save the residuals data to the dataStore, then
      //arrange the latest residual info for representation in the dygraph.

      // Find the plot id for this source
      var thisPlotID = 0;
      console.log('Data for plot'+thisPlotID);

      // The peak energies over all sources are not sequential. So build an
      // object of the peak energies and efficienicies so we can
      // then sort them into energy order before displaying the plot.
      // x value should be the literature energy value
      // y value is raw efficiency normalized to 152Eu

      // Fill the arrays with the data
      for(var i=0; i<dataStore.angularBinData.length; i++){
        dataStore.dataplotDataX[thisPlotID].push( Math.cos(dataStore.angular_bins_145mm[i]*(Math.PI / 180.000)) );
        dataStore.dataplotDataY[thisPlotID].push( dataStore.angularBinData[i] );
      //  dataStore.efficiencyPlotDataUnc[thisPlotID].push( data[i].YUnc );
      }
console.log(dataStore.dataplotDataX[thisPlotID]);
console.log(dataStore.dataplotDataY[thisPlotID]);

      // Fill the flags array
      var flags = [];
      flags.fillN(0, dataStore.dataplotDataX[thisPlotID].length);

      // Update the Y axis scale if needed
        dataStore.YAxisMinValue[thisPlotID][0] = 0.9;
        dataStore.YAxisMaxValue[thisPlotID][0] = 1.4;

      // Send the data to the plot
      dataStore.dataplotData[thisPlotID] = arrangePoints(dataStore.dataplotDataX[thisPlotID], [dataStore.dataplotDataY[thisPlotID]], flags );
      var eventString = 'updateDyData'+thisPlotID;
      console.log(eventString);
      dispatcher({ 'data': dataStore.dataplotData[thisPlotID] }, eventString);

    }


function buildCSVfile(){
    console.log('Download initiated');
    var keys = Object.keys(dataStore.sourceInfo);

    // Write the table of results to a CSV file for download.
    CSV = '';

    CSV += 'GRIFFIN Gamma-Gamma Angular Correlations Data\n\n';

    // List the run files used for this calibration
    CSV += 'Runfile:,' + dataStore.histoFileName + '\n';


    // Print the column titles
    CSV += '\nAngular Bin Index,';
    CSV += 'Angular Bin (deg),';
    CSV += 'Angular Bin cos(),';
    CSV += 'Gate Peak Energy (keV),';
    CSV += 'Singles Area,';
    CSV += 'Singles Area Uncertainty,';
    CSV += 'Fitted Peak Energy (keV),';
    CSV += 'Singles Area,';
    CSV += 'Singles Area Uncertainty,';
    CSV += 'Angular Bin Area,';
    CSV += 'Angular Bin Area Uncertainty,';
    CSV += 'Angular Bin Weight,';
    CSV += 'Normalization Factor,';
    CSV += 'Angular Correlation Value,';
    CSV += 'Ang. Corr. Value Uncertainty\n';

    // Loop through all angular bins to provide the data
    for(i=0; i<dataStore.angularBinData.length; i++){

        CSV += i + ',';
        CSV += dataStore.angular_bins_145mm[i] + ',';
        CSV += Math.cos(dataStore.angular_bins_145mm[i]*(Math.PI / 180.000)) + ',';
        CSV += dataStore.gatePeakEnergy + ',';
        CSV += dataStore.singlesPeakArea[i][1] + ',';
        CSV += '-' + ',';
        CSV += dataStore.fitPeakEnergies[0] + ',';
        CSV += dataStore.singlesPeakArea[i][0] + ',';
        CSV += '-' + ',';
        CSV += dataStore.angularBinPeakArea[i] + ',';
        CSV += '-' + ',';
        CSV += dataStore.angularBinWeight[i] + ',';
        CSV += dataStore.normalizationFactor + ',';
        CSV += dataStore.angularBinData[i] + ',';
        CSV += '-' + '\n';

     }

    // Create a download link
    const textBlob = new Blob([CSV], {type: 'text/plain'});
    URL.revokeObjectURL(window.textBlobURL);
    const downloadLink = document.createElement('a');
    downloadLink.href = URL.createObjectURL(textBlob);
    downloadLink.download = document.getElementById('saveCSVname').value;

    // Trigger the download
    document.body.appendChild(downloadLink);
    downloadLink.click();
}
