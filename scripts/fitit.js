function histofit(){

	///////////////////////////////////////////
	/////member variables//////////////////////
	///////////////////////////////////////////
	//Input
	this.x = []; //independent variables
	this.y = []; //dependent variables
	this.fxn = null; //function to fit, form: function(independent variable, [array of fittable parameters])
	this.guess = []; //initial fit guess

	//Output
	this.param = []; //fit parameters

	//Config
	this.stepSize = 1;  //initial size of step to take along gradient towards minima

	///////////////////////////////////////////
	/////member functions//////////////////////
	///////////////////////////////////////////

	//log probability of n counts in a bin where lambda were expected:
	this.logPoisson = function(n, lambda, logLambda){
		var i, start, N=0, loopLimit=1000;
		// This function was very slow to execute for high-statistics data and is called many time during the fitting routine.
		// Speed things up by giving the loop a head start value from a look-up table and then iterating no more than 999 times
		// The y value is limited to 500,000 already but this function was taking ~320ms
		// Execution time has been improved by more than a factor of 450, and now executes in well under 1 ms. Typcially 0.6-0.7ms for high-statistics peaks.
		if(n>500000){console.log("logPoisson has n > 500000 of "+n); }

    // Lookup table for loopLimit=1000, max n=500000
		var initialValue = [
			0,499500,1999000,4498500,7998000,12497500,17997000,24496500,31996000,40495500,49995000,60494500,71994000,84493500,97993000,112492500,127992000,144491500,161991000,180490500,199990000,220489500,241989000,264488500,287988000,312487500,337987000,364486500,391986000,420485500,449985000,480484500,511984000,544483500,577983000,612482500,647982000,684481500,721981000,760480500,799980000,840479500,881979000,924478500,967978000,1012477500,1057977000,1104476500,1151976000,1200475500,1249975000,1300474500,1351974000,1404473500,1457973000,1512472500,1567972000,1624471500,1681971000,1740470500,1799970000,1860469500,1921969000,1984468500,2047968000,2112467500,2177967000,2244466500,2311966000,2380465500,2449965000,2520464500,2591964000,2664463500,2737963000,2812462500,2887962000,2964461500,3041961000,3120460500,3199960000,3280459500,3361959000,3444458500,3527958000,3612457500,3697957000,3784456500,3871956000,3960455500,4049955000,4140454500,4231954000,4324453500,4417953000,4512452500,4607952000,4704451500,4801951000,4900450500,4999950000,5100449500,5201949000,5304448500,5407948000,5512447500,5617947000,5724446500,5831946000,5940445500,6049945000,6160444500,6271944000,6384443500,6497943000,6612442500,6727942000,6844441500,6961941000,7080440500,7199940000,7320439500,7441939000,7564438500,7687938000,7812437500,7937937000,8064436500,8191936000,8320435500,8449935000,8580434500,8711934000,8844433500,8977933000,9112432500,9247932000,9384431500,9521931000,9660430500,9799930000,9940429500,10081929000,10224428500,10367928000,10512427500,10657927000,10804426500,10951926000,11100425500,11249925000,11400424500,11551924000,11704423500,11857923000,12012422500,12167922000,12324421500,12481921000,12640420500,12799920000,12960419500,13121919000,13284418500,13447918000,13612417500,13777917000,13944416500,14111916000,14280415500,14449915000,14620414500,14791914000,14964413500,15137913000,15312412500,15487912000,15664411500,15841911000,16020410500,16199910000,16380409500,16561909000,16744408500,16927908000,17112407500,17297907000,17484406500,17671906000,17860405500,18049905000,18240404500,18431904000,18624403500,18817903000,19012402500,19207902000,19404401500,19601901000,19800400500,19999900000,20200399500,20401899000,20604398500,20807898000,21012397500,21217897000,21424396500,21631896000,21840395500,22049895000,22260394500,22471894000,22684393500,22897893000,23112392500,23327892000,23544391500,23761891000,23980390500,24199890000,24420389500,24641889000,24864388500,25087888000,25312387500,25537887000,25764386500,25991886000,26220385500,26449885000,26680384500,26911884000,27144383500,27377883000,27612382500,27847882000,28084381500,28321881000,28560380500,28799880000,29040379500,29281879000,29524378500,29767878000,30012377500,30257877000,30504376500,30751876000,31000375500,31249875000,31500374500,31751874000,32004373500,32257873000,32512372500,32767872000,33024371500,33281871000,33540370500,33799870000,34060369500,34321869000,34584368500,34847868000,35112367500,35377867000,35644366500,35911866000,36180365500,36449865000,36720364500,36991864000,37264363500,37537863000,37812362500,38087862000,38364361500,38641861000,38920360500,39199860000,39480359500,39761859000,40044358500,40327858000,40612357500,40897857000,41184356500,41471856000,41760355500,42049855000,42340354500,42631854000,42924353500,43217853000,43512352500,43807852000,44104351500,44401851000,44700350500,44999850000,45300349500,45601849000,45904348500,46207848000,46512347500,46817847000,47124346500,47431846000,47740345500,48049845000,48360344500,48671844000,48984343500,49297843000,49612342500,49927842000,50244341500,50561841000,50880340500,51199840000,51520339500,51841839000,52164338500,52487838000,52812337500,53137837000,53464336500,53791836000,54120335500,54449835000,54780334500,55111834000,55444333500,55777833000,56112332500,56447832000,56784331500,57121831000,57460330500,57799830000,58140329500,58481829000,58824328500,59167828000,59512327500,59857827000,60204326500,60551826000,60900325500,61249825000,61600324500,61951824000,62304323500,62657823000,63012322500,63367822000,63724321500,64081821000,64440320500,64799820000,65160319500,65521819000,65884318500,66247818000,66612317500,66977817000,67344316500,67711816000,68080315500,68449815000,68820314500,69191814000,69564313500,69937813000,70312312500,70687812000,71064311500,71441811000,71820310500,72199810000,72580309500,72961809000,73344308500,73727808000,74112307500,74497807000,74884306500,75271806000,75660305500,76049805000,76440304500,76831804000,77224303500,77617803000,78012302500,78407802000,78804301500,79201801000,79600300500,79999800000,80400299500,80801799000,81204298500,81607798000,82012297500,82417797000,82824296500,83231796000,83640295500,84049795000,84460294500,84871794000,85284293500,85697793000,86112292500,86527792000,86944291500,87361791000,87780290500,88199790000,88620289500,89041789000,89464288500,89887788000,90312287500,90737787000,91164286500,91591786000,92020285500,92449785000,92880284500,93311784000,93744283500,94177783000,94612282500,95047782000,95484281500,95921781000,96360280500,96799780000,97240279500,97681779000,98124278500,98567778000,99012277500,99457777000,99904276500,100351776000,100800275500,101249775000,101700274500,102151774000,102604273500,103057773000,103512272500,103967772000,104424271500,104881771000,105340270500,105799770000,106260269500,106721769000,107184268500,107647768000,108112267500,108577767000,109044266500,109511766000,109980265500,110449765000,110920264500,111391764000,111864263500,112337763000,112812262500,113287762000,113764261500,114241761000,114720260500,115199760000,115680259500,116161759000,116644258500,117127758000,117612257500,118097757000,118584256500,119071756000,119560255500,120049755000,120540254500,121031754000,121524253500,122017753000,122512252500,123007752000,123504251500,124001751000,124500250500,124999750000

		];

    start = n * Math.floor(n/loopLimit);
    N=initialValue[Math.floor(n/loopLimit)];
    if(N<1) N=0;
  //  console.log([start,initialValue,loop])
    for(var i=start; i<=n; i++){
      N += i;
    }
		return n*logLambda - lambda - N;
	}

	//negative log likelihood of seeing the observed spectrum given the theory function and <param> array
	this.NegLL = function(param){
		var lambda, i,
		nll = 0;

		for(i=0; i<this.x.length; i++){
			lambda = this.fxn.bind(this, this.x[i], param)();
//console.log(param)
		    nll -= this.logPoisson(this.y[i], lambda, Math.log(lambda));
		}
//console.log(nll)
		return nll;
	}

	//derivative in negative log likelihood space along parameter index <dim> at parameter config <param>:
	this.nllDer = function(param, dim){
		var tol = 0.000001,
			dtol1, dtol2, Xhi=[], Xlo=[], Xhi2=[], Xlo2=[], vary, D;

		for(vary = 0; vary < param.length; vary++){
			Xhi[vary] = param[vary];
			Xlo[vary] = param[vary];
			Xhi2[vary] = param[vary];
			Xlo2[vary] = param[vary];
		}
	    Xhi[dim]  += tol;
	    Xlo[dim]  -= tol;
	    Xhi2[dim] += tol / 2;
	    Xlo2[dim] -= tol / 2;

	    dtol = (this.NegLL.bind(this, Xhi)() - this.NegLL.bind(this, Xlo)()) / (2*tol);
	    dtol2 = (this.NegLL.bind(this, Xhi2)() - this.NegLL.bind(this, Xlo2)()) / tol;

	    D = (4*dtol2-dtol)/3;
	    //console.log(this.NegLL.bind(this, Xhi)())
	    return D;
	}

	//gradient in negative log likelihood space:
	this.nllGrad = function(param){
		var grad = [],
			i, length=0;
		for(i=0; i<param.length; i++){
			grad[i] = this.nllDer(param, i);
			length += (grad[i]*grad[i]);
		}

		length = Math.sqrt(length);
		//normalize
		for(i=0; i<param.length; i++){
			grad[i] /= length;
		}

		return grad;
	}

	//converge a fit
	this.fitit = function(){
		var i, grad, NLL, newNLL,
			dNLL = 1000,
			tolerance = 0.0001,
			limit = 1000;

		//demand same length of this.x and this.y
		if(this.x.length != this.y.length){
			console.log('length of input and output arrays must be equal; fit aborted.')
			return;
		}

		for(i=0; i<this.guess.length; i++)
			this.param[i] = this.guess[i];

		while(Math.abs(dNLL) > tolerance && limit>0){

			NLL = this.NegLL(this.param);
			grad = this.nllGrad(this.param);

			//step towards mimium
			for(i=0; i<this.param.length; i++){
				this.param[i] -= grad[i]*this.stepSize;
			}

			newNLL = this.NegLL(this.param);

			//take smaller steps as we approach minimum
			if(newNLL > NLL)
				this.stepSize = this.stepSize/2;

			dNLL = newNLL - NLL;
			limit--;

		}
		this.stepSize = 1;

	}

	//simple straight line:
	this.simpleLine = function(x,y){
		var i, X=0, Y=0, XY=0, X2=0,
			slope, intercept;

		for(i=0; i<x.length; i++){
			X += x[i];
			Y += y[i];
			XY += x[i]*y[i];
			X2 += x[i]*x[i];
		}

		slope = (x.length*XY - X*Y) / (x.length*X2 - X*X);
		intercept = (X2*Y - X*XY) / (x.length*X2 - X*X)

		return  [intercept, slope]
	}
};
